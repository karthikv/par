#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

PAR_PATH="bin/par"
OLD_PAR_PATH="bin/par-saved"

print_help() {
  echo "Usage: $0 [start|stop|finish]"
}

if [ $# -ne 1 ]; then
  print_help
  exit 1
fi

if [ "$1" == "start" ]; then
  if [ -f $OLD_PAR_PATH ]; then
    echo "Already bootstrapped"
  else
    echo "Compiling new par..."
    # We compile the new par. The parser is compiled with the old par, so
    # it runs with the old stdlibs. Any new programs will be compiled against
    # the new stdlibs, which are created by bin/precompile.
    BOOTSTRAP=1 bin/par -o ebin src/parser.par
    bin/precompile
    rebar3 as escript escriptize

    mv "$PAR_PATH" "$OLD_PAR_PATH"
    mv _build/escript/bin/par "$PAR_PATH"
    echo "Done"
  fi
elif [ "$1" == "stop" ]; then
  if [ -f $OLD_PAR_PATH ]; then
    echo -n "Reverting to old par... "
    mv "$OLD_PAR_PATH" "$PAR_PATH"
    echo "done"
  else
    echo "Not bootstrapped"
  fi
elif [ "$1" == "finish" ]; then
  if [ -f $OLD_PAR_PATH ]; then
    # We compile the parser with the new par, which has the new stdlibs, and
    # update the stdlibs again for consistency (though they shouldn't change
    # at this point).
    BOOTSTRAP=1 bin/par -o ebin src/parser.par
    bin/precompile
    set +e
    rebar3 eunit
    succeeded=$?
    set -e

    if [ $succeeded -eq 0 ]; then
      # Now we create the new-new-par, this time with the parser running with
      # the new stdlib.
      rebar3 as escript escriptize
      mv _build/escript/bin/par "$PAR_PATH"
      rm "$OLD_PAR_PATH"
      echo "Success!"
    else
      echo -n "Failed; still bootstrapped."
      exit 1
    fi
  else
    echo "Not bootstrapped"
  fi
else
  print_help
  exit 1
fi
