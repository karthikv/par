// Functions in this module operate on filesystem paths. Paths are separated
// into components by the Unix directory separator `/`. On Windows, even though
// `\` is the directory separator, the functions in this module convert `\` to
// `/` for consistency, and these converted paths can be used by the
// [`File`](file) module with no issues.
//
// @tagline Standard library for working with filesystem paths.
module Path

import Base (*)
import String

// Returns the last component of `path`. If `path` doesn't have any slashes,
// returns `path`.
//
// @args path
base : String -> String
export base = @filename:basename/1

// Returns all but the last component of `path`, representing the directory in
// which `path` resides. The result doesn't end in a trailing slash, unless the
// directory is the root directory `"/"`. If `path` contains no slashes, returns
// `"."`.
//
// @args path
dir : String -> String
export dir = @filename:dirname/1

// Returns the extension of `path`, or `""` if there is no extension.
//
// @args path
ext : String -> String
export ext = @filename:extension/1

// Returns `path` with the extension stripped.
//
// @args path
strip_ext : String -> String
export strip_ext = @filename:rootname/1

// Normalizes `path` by eliminating redundant `.` and `..` components and extra
// slashes, returning the shortest equivalent path. Note that, if `foo` is
// a symlink, a path like `"foo/../bar"` may not be equivalent to `"bar"`, so
// this function can return a wrong result in this case.
normalize : String -> String
export normalize(path) =
  let normed = split(path) |> normalize_r
  if normed == [] then
    "."
  else
    join_all(normed)

normalize_r : [String] -> [String]
normalize_r(parts) = match parts {
  ["." | t] => normalize_r(t)

  // We can't reduce a leading "..". This order is important so as to prevent
  // ["..", ".."] from being incorrectly reduced to [".."].
  [".." | t] => [".." | normalize_r(t)]
  [h, ".." | t] =>
    if String.ends_with?("/", h) then
      // This is an absolute path; keep the leading drive or forward slash to
      // reduce additional "..".
      normalize_r([h | t])
    else
      normalize_r(t)

  // We can't further normalize a followed by b. But it's possible that we can
  // reduce [b | t] further, possibly getting rid of b. If we can get rid of
  // b, we need to recurse again with a as the head. If b can't be removed, we
  // can keep a and b in the final result.
  [a, b | t] =>
    let norm = normalize_r([b | t])
    if !empty?(norm) && head(norm) == b then
      [a | norm]
    else
      normalize_r([a | norm])

  // A list with one or fewer elements can't be reduced further.
  l => l
}

// Returns an absolute version of `path`. The result is normalized (see
// [`normalize()`](#normalize)).
to_absolute : String -> String
export to_absolute(path) = @filename:absname(path) |> normalize

// Returns a relative path from `from` to `path`. `from` and `path` are
// normalized (see [`normalize()`](#normalize)) before a relative path is
// computed, so the relative path is also normalized.
to_relative : (String, String) -> String
export to_relative(path, from) =
  let parts = to_absolute(path) |> split
  let from_parts = to_absolute(from) |> split
  relative_r(parts, from_parts)

relative_r : ([String], [String]) -> String
relative_r(parts, from_parts) = match (parts, from_parts) {
  ([h | t], [from_h | from_t]) =>
    if h == from_h then
      relative_r(t, from_t)
    else
      join_all(map(from_parts, |_| "..") ++ parts)
  (_, _) => join_all(map(from_parts, |_| "..") ++ parts)
}

// Returns true if `path` is absolute.
absolute? : String -> Bool
export absolute?(path) = @filename:pathtype(path) == @absolute

// Returns true if `path` is relative.
relative? : String -> Bool
export relative?(path) =
  let type = @filename:pathtype(path)
  type == @relative || type == @volumerelative

// Joins `path1` and `path2` together with the directory separator.
join : (String, String) -> String
export join(path1, path2) = join_all([path1, path2])

// Joins all paths in `paths` with the directory separator.
join_all : [String] -> String
export join_all(paths) =
  if paths == [] then
    ""
  else
    // If any path after the first is absolute, @filename:join will discard all
    // paths prior to it in the list. To prevent this, force every path to be
    // relative. Note that we don't change the first path, as it decides whether
    // the entire path is absolute or not.
    if let [h | t] = paths then
      @filename:join([h | map(t, make_relative)])
    else
      @filename:join(paths)

// We only need to handle Unix-like absolute paths in the form /foo/bar, as
// these are the ones that cause @filename:join() to discard prior paths.
make_relative : String -> String
make_relative(path) =
  if String.starts_with?(path, "/") then
    let Some((_, suffix)) = String.span(path, "/")
    suffix
  else
    path

// Splits `path` on the directory separator, returning a list of components.
//
// @args path
split : String -> [String]
export split = @filename:split/1
