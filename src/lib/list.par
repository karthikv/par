// Functions in this module operate on type `[A]` (equivalent to `List<A>`),
// which represents a linked list with `O(1)` [`put()`](#put) and `O(n)`
// [`at()`](#at) and [`delete()`](#delete). Literal lists can be created with
// the syntax `[a, b, ...]`, where `a`, `b`, etc. are elements.
//
// @tagline Standard library for list operations.
module List

import Base (*)
import Map

impl Sized for [A] {
  length = @erlang:length/1
  empty?(l) = l == []
}

impl Mappable for List {
  map(l, f) = @lists:map(f, l)
}

impl Collection for List {
  fold(l, init, f) = match l {
    [h | t] => fold(t, f(init, h), f)
    [] => init
  }
  filter(l, f) = @lists:filter(f, l)
  find(l, f) = match l {
    [] => None
    [h | t] => if f(h) then Some(h) else find(t, f)
  }

  filter_map(l, f) = @lists:filtermap(|a|
    if let Some(b) = f(a) then
      assume (true, b)
    else
      false
  , l)
  fold_map(l, init, f) = match l {
    [h | t] =>
      let (new_init, new_h) = f(init, h)
      let (final, mapped) = fold_map(t, new_init, f)
      (final, [new_h | mapped])
    [] => (init, [])
  }

  put(l, h) = [h | l]
  delete(l, a) = match l {
    [] => []
    [&a | t] => delete(t, a)
    [h | t] => [h | delete(t, a)]
  }

  contains?(l, a) = match l {
    [] => false
    [&a | _] => true
    [_ | t] => contains?(t, a)
  }
  all?(l, f) = @lists:all(f, l)
  any?(l, f) = @lists:any(f, l)
}

impl ToSet for List {
  to_set(l) =
    let pairs = map(l, |a| (a, true))
    @maps:from_list([assume (@"_@type", @Set) | pairs])
}

// @replace T<K, V> => [(K, V)]
impl ToMap for List {
  to_map(l) = @maps:from_list(l)
}

// Raised by [`at()`](#at), [`split_at()`](#split_at), [`slice()`](#slice), and
// [`range()`](#range) when accessing an index out of bounds.
exception BadListIndex(Int)

// Raised by [`zip()`](#zip) when the two lists don't have the same lengths.
exception MismatchedLengths(Int, Int)

// Returns the maximum element in `l` as [`Some(max)`](base#Option), or
// [`None`](base#Option) if `l` is empty. `l` is expected to contain elements
// that satisfy the [`Ord`](/learn/reference#interfaces) interface, meaning they
// have a defined ordering.
max_in : [A ~ Ord] -> Option<A ~ Ord>
export max_in(l) = match l {
  [] => None
  _ => Some(@lists:max(l))
}

// Returns the minimum element in `l` as [`Some(min)`](base#Option), or
// [`None`](base#Option) if `l` is empty. `l` is expected to contain elements
// that satisfy the [`Ord`](/learn/reference#interfaces) interface, meaning they
// have a defined ordering.
min_in : [A ~ Ord] -> Option<A ~ Ord>
export min_in(l) = match l {
  [] => None
  _ => Some(@lists:min(l))
}

// Returns the element in `l` for which `f` returns the maximum value. `f`
// accepts an element as an argument and returns a value that satisfies the
// [`Ord`](/learn/reference#interfaces) interface, which has a defined ordering.
max_by : ([A], A -> B ~ Ord) -> Option<A>
export max_by(l, f) = match l {
  [] => None
  [h | t] =>
    let (max, _) = fold(t, (h, f(h)), |(max, max_key), x|
      let x_key = f(x)
      if x_key > max_key then (x, x_key) else (max, max_key)
    )
    Some(max)
}

// Returns the element in `l` for which `f` returns the minimum value. `f`
// accepts an element as an argument and returns a value that satisfies the
// [`Ord`](/learn/reference#interfaces) interface, which has a defined ordering.
min_by : ([A], A -> B ~ Ord) -> Option<A>
export min_by(l, f) = match l {
  [] => None
  [h | t] =>
    let (min, _) = fold(t, (h, f(h)), |(min, min_key), x|
      let x_key = f(x)
      if x_key < min_key then (x, x_key) else (min, min_key)
    )
    Some(min)
}

// Takes elements from `l` while `f` returns true, returning a new list. `f`
// accepts an element and returns true to take it or false to stop.
take_while : ([A], A -> Bool) -> [A]
export take_while(l, f) = @lists:takewhile(f, l)

// Drops elements from `l` while `f` returns true, returning a new list. `f`
// accepts an element and returns true to take it or false to stop.
drop_while : ([A], A -> Bool) -> [A]
export drop_while(l, f) = @lists:dropwhile(f, l)

// Takes elements from `l` while `f` returns true, and returns two new lists:
// the elements that were taken, and all remaining elements.
split_while : ([A], A -> Bool) -> ([A], [A])
export split_while(l, f) = @lists:splitwith(f, l)

// Creates a new list that has the element `a` repeated `n` times.
repeat : (A, Int) -> [A]
export repeat(a, n) = @lists:duplicate(n, a)

// Calls `f` for each element in `l`, concatenating the resultant lists together
// into one list. `f` accepts an element in `l` and returns a list.
flat_map : ([A], A -> [B]) -> [B]
export flat_map(l, f) = @lists:flatmap(f, l)

// Same as [`fold`](#fold), expect that it goes through `l` in the reverse
// order, calling `f` with the last element, then the second-to-last element,
// etc.
foldr : ([A], F, (F, A) -> F) -> F
export foldr(l, init, f) = match l {
  [h | t] => f(foldr(t, init, f), h)
  [] => init
}

// Same as [`fold_map`](#fold_map), expect that it goes through `l` in the
// reverse order, calling `f` with the last element, then the second-to-last
// element, etc. The resulting mapped list is still in the same order as the
// original list.
foldr_map : ([A], F, (F, A) -> (F, B)) -> (F, [B])
export foldr_map(l, init, f) = match l {
  [h | t] =>
    let (accum, mapped) = foldr_map(t, init, f)
    let (new_accum, new_h) = f(accum, h)
    (new_accum, [new_h | mapped])
  [] => (init, [])
}

// Returns two new lists: one containing elements for which `f` returns true,
// and the other containing elements for which `f` returns false.
partition : ([A], A -> Bool) -> ([A], [A])
export partition(l, f) = @lists:partition(f, l)

// Reverses the list `l`.
//
// @args l
reverse : [A] -> [A]
export reverse = @lists:reverse/1

// Returns a list containing the sequence of integers from `start` to `end`,
// both inclusive. If `start > end`, returns `[]`.
seq : (Int, Int) -> [Int]
export seq(start, end) =
  if start <= end then
    [start | seq(start + 1, end)]
  else
    []

// Returns the sum of all numbers in `l`.
//
// @args l
sum : [A ~ Num] -> A ~ Num
export sum = @lists:sum/1

// Sorts `l` in ascending order. `l` is expected to contain elements that
// satisfy the [`Ord`](/learn/reference#interfaces) interface, meaning they have
// a defined ordering.
//
// @args l
sort : [A ~ Ord] -> [A ~ Ord]
export sort = @lists:sort/1

// Sorts `l` in ascending order based on the return value of `f` for each
// element. The element for which `f` returns the minimum value is first, and
// the element for which `f` returns the maximum value is last. `f` accepts an
// element as an argument and returns a value that satisfies the
// [`Ord`](/learn/reference#interfaces) interface, which has a defined ordering.
//
// @args l
sort_by : ([A], A -> B ~ Ord) -> [A]
export sort_by(l, f) = @lists:sort(|a, b| f(a) < f(b), l)

// Sorts `l` in ascending order based on the comparator function `f`. `f` is
// called with two elements `a` and `b`, and the comparator should return true
// if `a` must be placed before `b` in the sorted list.
sort_cmp : ([A], (A, A) -> Bool) -> [A]
export sort_cmp(l, f) = @lists:sort(f, l)

// Returns the element at index `i` in `l`. `i` can be negative, where `-1` is
// the last index, `-2` is the second-to-last index, etc. If `at` tries to
// access an element at an invalid index, it raises
// [`BadListIndex`](#BadListIndex).
at : ([A], Int) -> A
export at(l, i) =
  let wrapped_i = if i < 0 then length(l) + i else i
  if wrapped_i < 0 then raise BadListIndex(i) else at_r(l, 0, wrapped_i)

at_r : ([A], Int, Int) -> A
at_r(l, i, n) = match l {
  [h | t] => if i == n then h else at_r(t, i + 1, n)
  [] => raise BadListIndex(i)
}

// Returns two lists: the first contains all elements from index `0` to `i - 1`,
// and the second contains all elements from index `i` to the end of the list.
// `i` can be negative, where `-1` is the last index, `-2` is the second-to-last
// index, etc. If `split_at` tries to access an element at an invalid index, it
// raises [`BadListIndex`](#BadListIndex).
split_at : ([A], Int) -> ([A], [A])
export split_at(l, i) =
  let wrapped_i = if i < 0 then length(l) + i else i
  if wrapped_i < 0 then
    raise BadListIndex(i)
  else
    split_at_r(l, 0, wrapped_i, [])

split_at_r : ([A], Int, Int, [A]) -> ([A], [A])
split_at_r(l, i, n, before) =
  if l == [] then
    raise BadListIndex(i)
  else if i == n then
    (reverse(before), l)
  else
    let [h | t] = l
    split_at_r(t, i + 1, n, [h | before])

// Takes `n` elements from the beginning of `l`, returning a new list. If `l`
// has fewer than `n` elements, returns `l`. If `n` is negative, returns `[]`.
take : ([A], Int) -> [A]
export take(l, n) =
  if n <= 0 then
    []
  else
    match l {
      [h | t] => [h | take(t, n - 1)]
      [] => []
    }

// Drops `n` elements from the beginning of `l`, returning a new list. If `l`
// has fewer than `n` elements, returns `[]`. If `n` is negative, returns `l`.
drop : ([A], Int) -> [A]
export drop(l, n) =
  if n <= 0 then
    l
  else
    match l {
      [_ | t] => drop(t, n - 1)
      [] => []
    }

// Returns a sublist of `l` starting at index `i` with length `len`. `i` can
// be negative, where `-1` is the last index, `-2` is the second-to-last index,
// etc. If `len <= 0`, returns `[]`. If `slice` tries to access an element at an
// invalid index, it raises [`BadListIndex`](#BadListIndex).
slice : ([A], Int, Int) -> [A]
export slice(l, i, len) =
  if len <= 0 then
    []
  else
    let wrapped_i = if i < 0 then length(l) + i else i
    if wrapped_i < 0 then
      raise BadListIndex(i)
    else
      slice_r(l, 0, wrapped_i, len)

// Returns a sublist of `l` starting at index `start` and ending at index
// `end`, inclusive. `start` and `end` can be negative, where `-1` is the last
// index, `-2` is the second-to-last index, etc. If `start > end` (after
// resolving negative indexes), returns `[]`. If `range` tries to access an
// element at an invalid index, it raises [`BadListIndex`](#BadListIndex).
range : ([A], Int, Int) -> [A]
export range(l, start, end) =
  let len = if start < 0 || end < 0 then length(l) else 0
  let wrapped_start = if start < 0 then len + start else start
  let wrapped_end = if end < 0 then len + end else end

  if wrapped_start > wrapped_end then
    []
  else if wrapped_start < 0 then
    raise BadListIndex(start)
  else if wrapped_end < 0 then
    raise BadListIndex(end)
  else
    slice_r(l, 0, wrapped_start, wrapped_end - wrapped_start + 1)

slice_r : ([A], Int, Int, Int) -> [A]
slice_r(l, i, start, len) =
  if len <= 0 then
    []
  else
    match l {
      [h | t] =>
        if i >= start then
          [h | slice_r(t, i + 1, start, len - 1)]
        else
          slice_r(t, i + 1, start, len)
      [] => raise BadListIndex(i)
    }

// Joins the list of strings `l` with the separator `sep`, returning a string.
// `sep` is placed in-between every two subsequent elements of `l`.
join : ([String], String) -> String
export join(l, sep) = @unicode:characters_to_binary(intersperse(l, sep))

intersperse : ([A], A) -> [A]
intersperse(l, sep) = match l {
  [] => []
  [h] => [h]
  [h | t] => [h, sep | intersperse(t, sep)]
}

// Returns a list where the `i`-th element is a tuple containing the `i`-th
// element of `l1` and the `i`-th element of `l2`. If `l1` and `l2` don't have
// the same length, raises [`MismatchedLengths`](#MismatchedLengths). See
// [`unzip()`](#unzip) for the opposite operation.
zip : ([A], [B]) -> [(A, B)]
export zip(l1, l2) = zip_r(l1, l2, 0)

zip_r : ([A], [B], Int) -> [(A, B)]
zip_r(l1, l2, i) = match (l1, l2) {
  ([h1 | t1], [h2 | t2]) => [(h1, h2) | zip_r(t1, t2, i + 1)]
  ([], []) => []
  _ => raise MismatchedLengths(i + length(l1), i + length(l2))
}

// Unpacks a list of tuples `l` into two separate lists. If the `i`-th element
// of `l` is a tuple `(a, b)`, the `i`-th element of the first result list is
// `a`, and the `i`-th element of the second result list is `b`. See
// [`zip()`](#zip) for the opposite operation.
//
// @args l
unzip : [(A, B)] -> ([A], [B])
export unzip = @lists:unzip/1

// Calls `f` on each element of `l`, returning a map from each return value of
// `f` to the list of elements that gave that return value.
group_by : ([A], A -> B) -> Map<B, [A]>
export group_by(l, f) =
  foldr(l, {}, |m, a| Map.upsert(m, f(a), [a], |group| [a | group]))

// Removes duplicates in `l`, returning a new list. `l` is not modified.
unique : [A] -> [A]
export unique(l) =
  let (unique_l_rev, _) = fold(l, ([], #[]), |(new_l, s), a|
    if contains?(s, a) then
      (new_l, s)
    else
      ([a | new_l], put(s, a))
  )

  reverse(unique_l_rev)

// Removes duplicates in `l`, returning a new list, where two elements are
// duplicates if `f` returns the same value for them. `l` is not modified.
unique_by : ([A], A -> B) -> [A]
export unique_by(l, f) =
  let (unique_l_rev, _) = fold(l, ([], #[]), |(new_l, s), a|
    let key = f(a)
    if contains?(s, key) then
      (new_l, s)
    else
      ([a | new_l], put(s, key))
  )

  reverse(unique_l_rev)

// Pairs each element in `l` with its index, returning a new list of tuples.
with_index : [A] -> [(A, Int)]
export with_index(l) = with_index_r(l, 0)

with_index_r : ([A], Int) -> [(A, Int)]
with_index_r(l, i) = match l {
  [h | t] => [(h, i) | with_index_r(t, i + 1)]
  [] => []
}

// Calls `f` on each element of `l`. This function rarely needs to be used, and
// is only necessary when performing a side-effect (e.g. printing, writing to
// a file, etc.) for each element in a list. In most cases, what you really want
// is a specific operation like [`map()`](#map), [`filter()`](#filter), or
// [`fold()`](#fold).
//
// @example // prints each element
// | each([1, 2, 3], |e| print("element: " ++ e))
each : ([A], A -> B) -> ()
export each(l, f) =
  @lists:foreach(f, l)
  ()
