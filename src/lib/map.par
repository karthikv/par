module Map

import Base (*)

get_or : (Map<K, V>, K, V) -> V
export get_or(m, k, default) = match @maps:find(k, m) {
  (@ok, v) => v
  @error => default
}

keys : Map<K, V> -> [K]
export keys = @maps:keys/1

values : Map<K, V> -> [V]
export values = @maps:values/1

update : (Map<K, V>, K, V -> V) -> Map<K, V>
export update(m, k, f) = match @maps:find(k, m) {
  (@ok, v) => @maps:put(k, f(v), m)
  @error => raise BadKey
}

upsert : (Map<K, V>, K, V, V -> V) -> Map<K, V>
export upsert(m, k, default, f) = match @maps:find(k, m) {
  (@ok, v) => @maps:put(k, f(v), m)
  @error => @maps:put(k, default, m)
}

merge : (Map<K, V>, Map<K, V>) -> Map<K, V>
export merge = @maps:merge/2

with : (Map<K, V>, [K]) -> Map<K, V>
export with(m, keys) = @maps:with(keys, m)

without : (Map<K, V>, [K]) -> Map<K, V>
export without(m, keys) = @maps:without(keys, m)
