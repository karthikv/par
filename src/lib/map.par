module Map

import Base (*)

get_or : K -> V -> Map<K, V> -> V
export get_or(k, default, m) = match @maps:find(k, m) {
  (@ok, v) => v
  @error => default
}

keys : Map<K, V> -> [K]
export keys = @maps:keys/1

values : Map<K, V> -> [V]
export values = @maps:values/1

update : K -> (V -> V) -> Map<K, V> -> Map<K, V>
export update(k, f, m) = match @maps:find(k, m) {
  (@ok, v) => @maps:put(k, f(v), m)
  @error => raise BadKey
}

upsert : K -> (V -> V) -> V -> Map<K, V> -> Map<K, V>
export upsert(k, f, default, m) = match @maps:find(k, m) {
  (@ok, v) => @maps:put(k, f(v), m)
  @error => @maps:put(k, default, m)
}

merge : Map<K, V> -> Map<K, V> -> Map<K, V>
export merge = @maps:merge/2

with : [K] -> Map<K, V> -> Map<K, V>
export with = @maps:with/2

without : [K] -> Map<K, V> -> Map<K, V>
export without = @maps:without/2
