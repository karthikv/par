// Functions in this module operate on type `Map<K, V>`, which represents a hash
// map with `O(1)` [`put()`](#put),
// [`lookup()`](base#lookup)/[`get()`](base#get), and [`remove()`](base#remove).
// Literal maps can be created with the syntax `{ k1 => v1, k2 => v2, ... }`,
// where `k1`, `k2`, etc. are keys and `v1`, `v2`, etc.  are the associated
// values, respectively.
//
// @tagline Standard library for map operations.
module Map

import Base (*)

impl Sized for Map<K, V> {
  length = @erlang:map_size/1
  empty?(m) = m == {}
}

impl Concat for Map<K, V> {
  concat = merge
  concat_all(l) = fold(l, {}, concat)
}

// @replace T<A> => Map<K, V>
// | A => (K, V)
// | T<B> => Map<L, M>
// | B => (L, M)
impl Mappable for Map {
  map(m, f) = @maps:fold(|k, v, new_m|
    let (new_k, new_v) = f((k, v))
    @maps:put(new_k, new_v, new_m)
  , {}, m)
}

// Returns the value associated with key `k` in map `m`, or `default` if `k`
// isn't in `m`.
get_or : (Map<K, V>, K, V) -> V
export get_or(m, k, default) = match @maps:find(k, m) {
  (@ok, v) => v
  @error => default
}

// Returns a list of keys in `m`.
//
// @args m
keys : Map<K, V> -> [K]
export keys = @maps:keys/1

// Returns a list of values in `m`
//
// @args m
values : Map<K, V> -> [V]
export values = @maps:values/1

// Updates the value associated with the existing key `k` in map `m` using the
// function `f`, returning a new map. `f` accepts the current value associated
// with `k` and returns the new value. If `k` isn't in `m`, raises
// [`BadKey`](base#BadKey). Use [`upsert()`](#upsert) if you want to handle the
// case where `k` isn't in `m`. Note that `m` isn't modified.
update : (Map<K, V>, K, V -> V) -> Map<K, V>
export update(m, k, f) = match @maps:find(k, m) {
  (@ok, v) => @maps:put(k, f(v), m)
  @error => raise BadKey
}

// Updates or inserts a value associated with key `k` in map `m` using the
// function `f`, returning a new map. `f` accepts the current value associated
// with `k` and returns the new value. If key `k` isn't in `m`, sets the
// associated value to `default`. If you know key `k` is in `m`, use
// [`update()`](#update). Note that `m` isn't modified.
upsert : (Map<K, V>, K, V, V -> V) -> Map<K, V>
export upsert(m, k, default, f) = match @maps:find(k, m) {
  (@ok, v) => @maps:put(k, f(v), m)
  @error => @maps:put(k, default, m)
}

// Merges maps `a` and `b` together, returning a new map. If a key exists in
// both `a` and `b`, the value in `b` takes precedence. This is an alias for
// [`concat()`](base#concat) and is equivalent to `a ++ b`.
//
// @args a, b
merge : (Map<K, V>, Map<K, V>) -> Map<K, V>
export merge = @maps:merge/2

// Filters `m` to only have keys in `keys`, returning a new map. `m` is not
// modified.
with : (Map<K, V>, [K]) -> Map<K, V>
export with(m, keys) = @maps:with(keys, m)

// Filters `m` to **not** have any keys in `keys`, returning a new map. `m` is
// not modified.
without : (Map<K, V>, [K]) -> Map<K, V>
export without(m, keys) = @maps:without(keys, m)

// @replace T<A> => Map<K, V>
// | A => (K, V)
// | T<B> => Map<L, M>
// | B => (L, M)
impl Collection for Map {
  fold(m, init, f) = @maps:fold(|k, v, accum| f(accum, (k, v)), init, m)
  filter(m, f) = @maps:filter(|k, v| f((k, v)), m)
  find(m, f) = to_list(m) |> find(f)

  filter_map(m, f) = to_list(m) |> filter_map(f) |> to_map
  fold_map(m, init, f) =
    let (final, mapped) = to_list(m) |> fold_map(init, f)
    (final, to_map(mapped))

  put(m, (k, v)) = @maps:put(k, v, m)
  delete(m, (k, v)) = if contains?(m, (k, v)) then @maps:remove(k, m) else m

  contains?(m, (k, v)) = match @maps:find(k, m) {
    (@ok, &v) => true
    _ => false
  }
  all?(m, f) = to_list(m) |> all?(f)
  any?(m, f) = to_list(m) |> any?(f)
}

// @replace T<A> => Map<K, V>
// | A => (K, V)
impl ToList for Map {
  to_list(m) = @maps:to_list(m)
}

// @replace T<A> => Map<K, V>
// | A => (K, V)
impl ToSet for Map {
  to_set(m) = to_list(m) |> to_set
}
