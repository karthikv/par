// Functions in this module operate on type `Set<A>`, which represents a hash
// set (using a hash array mapped trie) with `O(log n)` [`put()`](#put),
// [`contains?()`](#contains?), and [`delete()`](#delete). Literal sets can be
// created with the syntax `#[a, b, ...]`, where `a`, `b`, etc. are elements.
//
// @tagline Standard library for set operations.
module Set

import Base (*)

impl Sized for Set<A> {
  // subtract 1 to get rid of tag
  length(s) = @erlang:map_size(s) - 1
  empty?(s) = length(s) == 0
}

impl Concat for Set<A> {
  concat = union
  concat_all(l) = fold(l, #[], concat)
}

impl Mappable for Set {
  map(s, f) = map(to_list(s), f) |> to_set
}

// Returns a new set with elements that are **both** in set `a` and in set `b`.
intersect : (Set<A>, Set<A>) -> Set<A>
export intersect(a, b) = @maps:with(@maps:keys(b), a)

// Merges sets `a` and `b`, returning a new set. This is an alias for
// [`concat()`](base#concat) and is equivalent to `a ++ b`.
union : (Set<A>, Set<A>) -> Set<A>
export union(a, b) = @maps:merge(a, b)

// Returns a new set with elements that are in set `a`, but not in set `b`. This
// is equivalent to `a -- b`.
subtract : (Set<A>, Set<A>) -> Set<A>
export subtract(a, b) = @maps:without(to_list(b), a)

// Returns true if `b` is a subset of `a`; that is, if `a` contains every
// element in `b`. Note that if `a == b`, this function returns true.
subset? : (Set<A>, Set<A>) -> Bool
export subset?(a, b) = all?(b, |e| contains?(a, e))

// Returns true if `a` and `b` share no elements in common.
disjoint? : (Set<A>, Set<A>) -> Bool
export disjoint?(a, b) = empty?(intersect(a, b))

impl Collection for Set {
  fold(s, init, f) = to_list(s) |> fold(init, f)
  filter(s, f) = @maps:filter(|k, _| assume k == @"_@type" || f(k), s)
  find(s, f) = to_list(s) |> find(f)

  filter_map(s, f) = to_list(s) |> filter_map(f) |> to_set
  fold_map(s, init, f) =
    let (final, mapped) = to_list(s) |> fold_map(init, f)
    (final, to_set(mapped))

  put(s, a) = @maps:put(a, true, s)
  delete(s, a) = @maps:remove(a, s)

  contains?(s, a) = @maps:is_key(a, s)
  all?(s, f) = to_list(s) |> all?(f)
  any?(s, f) = to_list(s) |> any?(f)
}

impl ToList for Set {
  to_list(s) = @maps:keys(@maps:remove(@"_@type", s))
}

// @replace T<K, V> => Set<(K, V)>
impl ToMap for Set {
  to_map(s) = to_list(s) |> to_map
}
