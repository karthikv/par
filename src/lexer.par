module Lexer

struct Loc {
  start_line : Int
  start_col : Int
  end_line : Int
  end_col : Int
}

enum Token {
  Eq(Loc) @"=="
  FatArrow(Loc) @"=>"
  Assign(Loc) @"="

  NotEq(Loc) @"!="
  Not(Loc) @"!"

  ShouldEq(Loc) @"?=="
  ShouldNotEq(Loc) @"?!="

  GtEq(Loc) @">="
  Gt(Loc) @">"
  LtEq(Loc) @"<="
  Lt(Loc) @"<"

  LParen(Loc) @"("
  RParen(Loc) @")"
  LBracket(Loc) @"["
  RBracket(Loc) @"]"
  LBrace(Loc) @"{"
  RBrace(Loc) @"}"

  Or(Loc) @"||"
  Pipe(Loc) @"|>"
  Bar(Loc) @"|"

  Concat(Loc) @"++"
  Add(Loc) @"+"

  Separate(Loc) @"--"
  Arrow(Loc) @"->"
  Sub(Loc) @"-"

  Comment(Loc, [Char])
  Div(Loc) @"/"

  Ext(Loc) @":="
  Colon(Loc) @":"

  And(Loc) @"&&"
  Amp(Loc) @"&"

  Comma(Loc) @","
  Mul(Loc) @"*"
  Mod(Loc) @"%"
  Dollar(Loc) @"$"
  Pound(Loc) @"#"
  Tilde(Loc) @"~"

  Module(Loc) @module
  Import(Loc) @import
  Export(Loc) @export
  Enum(Loc) @enum
  Exception(Loc) @exception
  Struct(Loc) @struct
  Interface(Loc) @interface
  Impl(Loc) @impl

  If(Loc) @if
  Then(Loc) @then
  Else(Loc) @else
  Let(Loc) @let
  Match(Loc) @match
  Try(Loc) @try
  Raise(Loc) @raise
  Ensure(Loc) @ensure
  After(Loc) @after
  Discard(Loc) @discard
  Test(Loc) @test

  LitBool(Loc, Bool) @bool
  LitChar(Loc, Char) @char
  LitStr(Loc, String) @str
  LitAtom(Loc, Atom) @atom

  Underscore(Loc) @"_"
  Var(Loc, [Char]) @var

  TV(Loc, [Char]) @tv_token
  Con(Loc, [Char]) @con_token

  Dot(Loc) @"."
  LitInt(Loc, Int) @int
  LitFloat(Loc, Float) @float

  Whitespace(Loc, [Char])
  Unexpected(Loc, [Char], String) @unexpected
}

enum Result<T, E> {
  Ok(T) @ok
  Err(E) @errors
}

tokenize : [Char] -> Result<[Token], [Token]>
export tokenize(chs) =
  let tokens = tokenize_r(chs, 1, 1, [])
  let (tokens, errs) = foldl(|token, (accum, errs)| match token {
    Comment(_, _) => (accum, errs)
    Whitespace(_, _) => (accum, errs)
    Unexpected(_, _, _) => (accum, [token | errs])
    _ => ([token | accum], errs)
  }, ([], []), tokens)

  if errs == [] then
    Ok(reverse(tokens))
  else
    Err(reverse(errs))

tokenize_r : [Char] -> Int -> Int -> [Token] -> [Token]
tokenize_r(chs, line, col, tokens) =
  if let [] = chs then
    reverse(tokens)
  else
    let loc = Loc {
      start_line = line
      start_col = col
      end_line = line
      end_col = col
    }

    let (token, left) = match chs {
      ['=', '=' | t] => (Eq(inc(loc, 2)), t)
      ['=', '>' | t] => (FatArrow(inc(loc, 2)), t)
      ['=' | t] => (Assign(inc(loc, 1)), t)

      ['!', '=' | t] => (NotEq(inc(loc, 2)), t)
      ['!' | t] => (Not(inc(loc, 1)), t)

      ['?', '=', '=' | t] => (ShouldEq(inc(loc, 3)), t)
      ['?', '!', '=' | t] => (ShouldNotEq(inc(loc, 3)), t)

      ['>', '=' | t] => (GtEq(inc(loc, 2)), t)
      ['>' | t] => (Gt(inc(loc, 1)), t)
      ['<', '=' | t] => (LtEq(inc(loc, 2)), t)
      ['<' | t] => (Lt(inc(loc, 1)), t)

      ['(' | t] => (LParen(inc(loc, 1)), t)
      [')' | t] => (RParen(inc(loc, 1)), t)
      ['[' | t] => (LBracket(inc(loc, 1)), t)
      [']' | t] => (RBracket(inc(loc, 1)), t)
      ['{' | t] => (LBrace(inc(loc, 1)), t)
      ['}' | t] => (RBrace(inc(loc, 1)), t)

      ['|', '|' | t] => (Or(inc(loc, 2)), t)
      ['|', '>' | t] => (Pipe(inc(loc, 2)), t)
      ['|' | t] => (Bar(inc(loc, 1)), t)

      ['+', '+' | t] => (Concat(inc(loc, 2)), t)
      ['+' | t] => (Add(inc(loc, 1)), t)

      ['-', '-' | t] => (Separate(inc(loc, 2)), t)
      ['-', '>' | t] => (Arrow(inc(loc, 2)), t)
      ['-' | t] => (Sub(inc(loc, 1)), t)

      ['/', '/' | t] =>
        let (comment, len, t) = until_nl(t)
        (Comment(inc(loc, 2 + len), comment), t)
      ['/' | t] => (Div(inc(loc, 1)), t)

      [':', '=' | t] => (Ext(inc(loc, 2)), t)
      [':' | t] => (Colon(inc(loc, 1)), t)

      ['&', '&' | t] => (And(inc(loc, 2)), t)
      ['&' | t] => (Amp(inc(loc, 1)), t)

      [',' | t] => (Comma(inc(loc, 1)), t)
      ['*' | t] => (Mul(inc(loc, 1)), t)
      ['%' | t] => (Mod(inc(loc, 1)), t)
      ['$' | t] => (Dollar(inc(loc, 1)), t)
      ['#' | t] => (Pound(inc(loc, 1)), t)
      ['~' | t] => (Tilde(inc(loc, 1)), t)

      ['\'', '\\', ch, '\'' | t] => (LitChar(inc(loc, 4), unesc(ch)), t)
      ['\'', ch, '\'' | t] => (LitChar(inc(loc, 3), ch), t)

      ['"' | t] => tokenize_str(loc, ['"' | t])

      ['@', '"' | t] =>
        match tokenize_str(loc, ['"' | t]) {
          (LitStr(loc, str), t) => (LitAtom(inc(loc, 1), str_to_atom(str)), t)

          // bad string literal; make the error start at the opening quote
          (Unexpected(loc, token, msg), t) =>
            let new_loc = inc({ loc | start_col = loc.start_col + 1 }, 1)
            (Unexpected(new_loc, token, msg), t)
        }

      ['@', h | t] =>
        if word?(h) then
          let (chs, len, t) = until_not(word?, t) |> allow_qmark
          (LitAtom(inc(loc, 2 + len), to_atom([h | chs])), t)
        else
          let token = Unexpected(
            inc(loc, 2),
            ['@', h],
            "Unquoted atoms must only contain letters, digits, and " ++
            "underscores. If you'd like to use other characters, use a " ++
            "quoted atom, like @\"a quoted atom\""
          )
          (token, t)

      [h | t] =>
        if h == '_' then
          match t {
            [] => (Underscore(inc(loc, 1)), t)
            [next | t] =>
              if lower?(next) then
                let (chs, len, t) = until_not(word?, t) |> allow_qmark
                (Var(inc(loc, 2 + len), [h, next | chs]), t)
              else
                (Underscore(inc(loc, 1)), [next | t])
          }
        else if upper?(h) then
          match t {
            [] => (TV(inc(loc, 1), [h]), t)
            [next | t] =>
              if word?(next) then
                let (chs, len, t) = until_not(word?, t)
                (Con(inc(loc, 2 + len), [h, next | chs]), t)
              else
                (TV(inc(loc, 1), [h]), [next | t])
          }
        else if lower?(h) then
          let (chs, len, t) = until_not(word?, t) |> allow_qmark
          let token = get(
            [h | chs],
            chs_to_token_fn,
            flip(Var, [h | chs]),
            inc(loc, 1 + len)
          )
          (token, t)
        else if h == '.' then
          match t {
            [] => (Dot(inc(loc, 1)), t)
            [next | t] =>
              if digit?(next) then
                // must prefix accum with 0 for to_float to work
                tokenize_num_r(loc, [h, next | t], false, ['0'])
              else
                (Dot(inc(loc, 1)), [next | t])
          }
        else if digit?(h) then
          tokenize_num(loc, [h | t])
        else if whitespace?(h) then
          tokenize_whitespace(loc, [h | t])
        else
          (Unexpected(inc(loc, 1), [h], "Unexpected character"), t)
    }

    let next_loc = @erlang:element(2, token) : Loc
    tokenize_r(left, next_loc.end_line, next_loc.end_col, [token | tokens])

tokenize_num : Loc -> [Char] -> (Token, [Char])
tokenize_num(loc, chs) = tokenize_num_r(loc, chs, false, [])

tokenize_num_r : Loc -> [Char] -> Bool -> [Char] -> (Token, [Char])
tokenize_num_r(loc, chs, seen_dot?, accum) = match chs {
  [] => tokenize_num_finish(loc, seen_dot?, accum, [])
  [h | t] =>
    if digit?(h) then
      tokenize_num_r(inc(loc, 1), t, seen_dot?, [h | accum])
    else if h == '.' then
      if seen_dot? then
        let token = Unexpected(
          inc(loc, 1),
          reverse(accum),
          "Can't have multiple dots in numeric literal"
        )
        (token, t)
      else
        tokenize_num_r(inc(loc, 1), t, true, [h | accum])
    else
      tokenize_num_finish(loc, seen_dot?, accum, [h | t])
}

tokenize_num_finish : Loc -> Bool -> [Char] -> [Char] -> (Token, [Char])
tokenize_num_finish(loc, seen_dot?, accum, left) =
  if seen_dot? then
    (LitFloat(loc, to_float(reverse(accum))), left)
  else
    (LitInt(loc, to_int(reverse(accum))), left)

tokenize_str : Loc -> [Char] -> (Token, [Char])
tokenize_str(loc, chs) =
  let ['"' | t] = chs
  tokenize_str_r(inc(loc, 1), t, [])

tokenize_str_r : Loc -> [Char] -> [Char] -> (Token, [Char])
tokenize_str_r(loc, chs, accum) = match chs {
  ['\\', h | t] =>
    let next_loc = match h {
      '\n' => next_line(loc)
      _ => inc(loc, 2)
    }
    tokenize_str_r(next_loc, t, [unesc(h) | accum])

  ['"' | t] => (LitStr(inc(loc, 1), to_str(reverse(accum))), t)

  ['\n' | t] =>
    let token = Unexpected(
      next_line(loc),
      reverse(['\n' | accum]),
      "Unterminated string literal. You can use \\n for a newline character " ++
      "or use \\ at the end of a line to continue the string literal on the " ++
      "next line. Note that the latter also inserts a newline character. If " ++
      "you want to concat multiple strings, use the ++ operator"
    )
    (token, t)

  [h | t] => tokenize_str_r(inc(loc, 1), t, [h | accum])

  [] =>
    let token = Unexpected(
      loc,
      reverse(accum),
      "Unterminated string literal"
    )
    (token, [])
}

tokenize_whitespace : Loc -> [Char] -> (Token, [Char])
tokenize_whitespace(loc, chs) = tokenize_whitespace_r(loc, chs, [])

tokenize_whitespace_r : Loc -> [Char] -> [Char] -> (Token, [Char])
tokenize_whitespace_r(loc, chs, accum) = match chs {
  ['\n' | t] => tokenize_whitespace_r(
    { loc | end_line = loc.end_line + 1, end_col = 1 },
    t,
    ['\n' | accum]
  )
  [h | t] =>
    if whitespace?(h) then
      tokenize_whitespace_r(inc(loc, 1), t, [h | accum])
    else
      (Whitespace(loc, reverse(accum)), [h | t])
  [] => (Whitespace(loc, reverse(accum)), [])
}

chs_to_token_fn : Map<[Char], Loc -> Token>
chs_to_token_fn = {
  to_list("module") => Module,
  to_list("import") => Import,
  to_list("export") => Export,
  to_list("enum") => Enum,
  to_list("exception") => Exception,
  to_list("struct") => Struct,
  to_list("interface") => Interface,
  to_list("impl") => Impl,

  to_list("if") => If,
  to_list("then") => Then,
  to_list("else") => Else,
  to_list("let") => Let,
  to_list("match") => Match,
  to_list("try") => Try,
  to_list("raise") => Raise,
  to_list("ensure") => Ensure,
  to_list("after") => After,
  to_list("discard") => Discard,
  to_list("test") => Test,

  to_list("true") => flip(LitBool, true),
  to_list("false") => flip(LitBool, false),
}

get : A -> Map<A, B> -> B -> B
get = @maps:get/3

until_nl : [Char] -> ([Char], Int, [Char])
until_nl(chs) = until_nl_r(chs, [], 0)

until_nl_r : [Char] -> [Char] -> Int -> ([Char], Int, [Char])
until_nl_r(chs, accum, len) = match chs {
  ['\n' | t] => (reverse(accum), len + 1, ['\n' | t])
  [h | t] => until_nl_r(t, [h | accum], len + 1)
  [] => (reverse(accum), len, [])
}

until_not : (Char -> Bool) -> [Char] -> ([Char], Int, [Char])
until_not(cb, chs) = until_not_r(cb, chs, [], 0)

until_not_r : (Char -> Bool) -> [Char] -> [Char] -> Int -> ([Char], Int, [Char])
until_not_r(cb, chs, accum, len) = match chs {
  [] => (reverse(accum), len, [])
  [h | t] =>
    if cb(h) then
      until_not_r(cb, t, [h | accum], len + 1)
    else
      (reverse(accum), len, [h | t])
}

allow_qmark : ([Char], Int, [Char]) -> ([Char], Int, [Char])
allow_qmark((chs, len, t)) =
  if let ['?' | t] = t then
    (chs ++ ['?'], len + 1, t)
  else
    (chs, len, t)

lower? : Char -> Bool
lower?(ch) = $ch >= $'a' && $ch <= $'z'

upper? : Char -> Bool
upper?(ch) = $ch >= $'A' && $ch <= $'Z'

digit? : Char -> Bool
digit?(ch) = $ch >= $'0' && $ch <= $'9'

whitespace? : Char -> Bool
whitespace?(ch) = ch == ' ' || ch == '\t' || ch == '\n' || ch == '\r'

word? : Char -> Bool
word?(ch) = lower?(ch) || upper?(ch) || digit?(ch) || ch == '_'

inc : Loc -> Int -> Loc
inc(loc, amount) = { loc | end_col = loc.end_col + amount }

next_line : Loc -> Loc
next_line(loc) = { loc | end_line = loc.end_line + 1, end_col = 1 }

unesc : Char -> Char
unesc(ch) = match ch {
  'b' => '\b'
  'f' => '\f'
  'n' => '\n'
  'r' => '\r'
  't' => '\t'
  'e' => '\e'
  'v' => '\v'
  's' => '\s'
  'd' => '\d'
  _ => ch
}

foldl : (A -> B -> B) -> B -> [A] -> B
foldl = @lists:foldl/3

flip : (A -> B -> C) -> B -> A -> C
flip(f, b, a) = f(a, b)

length : [A] -> Int
length = @erlang:length/1

to_str : [Char] -> String
to_str = @erlang:list_to_binary/1

to_atom : [Char] -> Atom
to_atom = @erlang:list_to_atom/1

str_to_atom : String -> Atom
str_to_atom = flip(@erlang:binary_to_atom/2, @latin1)

to_int : [Char] -> Int
to_int = @erlang:list_to_integer/1

to_float : [Char] -> Float
to_float = @erlang:list_to_float/1

to_list : String -> [Char]
to_list = @erlang:binary_to_list/1

reverse : [A] -> [A]
reverse = @lists:reverse/1

print : A -> A
print(a) =
  @io:format("~p~n", [a])
  a
