module FileTest

import File (*)
import Test (group, capture, ok)

read_path_test : Test
read_path_test = group([
  test assert read_path(write_temp("")) == ""
  // @example
  test assert read_path(write_temp("foo")) == "foo"
  test assert capture(|-| read_path("asdf")) == DoesntExist
])

write_path_test : Test
write_path_test = group([
  // @example
  test
    let path = Path.join(make_temp_dir(), "new")
    write_path(path, "foo")
    assert read_path(path) == "foo"
  test
    let path = write_temp("foo")
    write_path(path, "bar")
    assert read_path(path) == "bar"
  test
    let path = Path.join_all([make_temp_dir(), "new", "sub"])
    assert capture(|-| write_path(path, "foo")) == DoesntExist
])

cp_test : Test
cp_test = group([
  // @example
  test
    let path = write_temp("foo")
    let new_path = Path.join(make_temp_dir(), "new")

    cp(path, new_path)
    assert read_path(new_path) == "foo"
    assert read_path(path) == "foo"

  test
    let path = Path.join(make_temp_dir(), "orig")
    let new_path = Path.join(make_temp_dir(), "new")
    assert capture(|-| cp(path, new_path)) == DoesntExist

  test
    let path = make_temp_dir()
    let new_path = Path.join(make_temp_dir(), "new")
    assert capture(|-| cp(path, new_path)) == IllegalDirOperation

  test
    let path = write_temp("foo")
    let new_path = write_temp("bar")

    cp(path, new_path)
    assert read_path(new_path) == "foo"
    assert read_path(path) == "foo"
])

mv_test : Test
mv_test = group([
  // @example
  test
    let path = write_temp("foo")
    let new_path = Path.join(make_temp_dir(), "new")

    mv(path, new_path)
    assert read_path(new_path) == "foo"
    assert !exists?(path)

  test
    let path = make_temp_dir()
    let new_path = Path.join(make_temp_dir(), "new")

    mv(path, new_path)
    assert stat(new_path).type == Directory
    assert !exists?(path)

  test
    let path = write_temp("foo")
    let new_path = write_temp("bar")

    mv(path, new_path)
    assert read_path(new_path) == "foo"
    assert !exists?(path)
])

rm_test : Test
rm_test = group([
  // @example
  test
    let path = write_temp("")
    rm(path)
    assert !exists?(path)
  test assert capture(|-| rm("asdf")) == DoesntExist
  test assert capture(|-| rm(make_temp_dir())) == NotPermitted
])

rmdir_test : Test
rmdir_test = group([
  // @example
  test
    let path = make_temp_dir()
    rmdir(path)
    assert !exists?(path)
  test
    let exc = if OS.windows? then IOError else NotDirectory
    assert capture(|-| rmdir(write_temp(""))) == exc
  test
    let path = make_temp_dir()
    write_path(Path.join(path, "foo"), "bar")
    assert capture(|-| rmdir(path)) == Exists
])

ls_test : Test
ls_test = group([
  // @example
  test
    let path = make_temp_dir()
    write_path(Path.join(path, "foo"), "")
    write_path(Path.join(path, "bar"), "")
    mkdir(Path.join(path, "baz"))
    assert to_set(ls(path)) == #["foo", "bar", "baz"]
  test assert ls(make_temp_dir()) == []
  test
    let exc = if OS.windows? then IOError else NotDirectory
    assert capture(|-| ls(write_temp(""))) == exc
])

glob_test : Test
glob_test = group([
  // @example
  test
    let path = make_temp_dir()
    let foo_path = Path.join(path, "foo")
    let bar_path = Path.join(path, "bar")
    let baz_path = Path.join(path, "baz-foo")

    write_path(foo_path, "")
    write_path(bar_path, "")
    mkdir(baz_path)

    assert to_set(glob(Path.join(path, "*"))) ==
      #[foo_path, bar_path, baz_path]
    assert to_set(glob(Path.join(path, "*foo"))) ==
      #[foo_path, baz_path]
    assert to_set(glob(Path.join(path, "{foo,bar}"))) ==
      #[foo_path, bar_path]
  test assert glob(Path.join(make_temp_dir(), "new")) == []
])

mkdir_test : Test
mkdir_test = group([
  // @example
  test
    let path = Path.join(make_temp_dir(), "new")
    mkdir(path)
    assert stat(path).type == Directory
  test
    let path = Path.join_all([make_temp_dir(), "new", "sub"])
    assert capture(|-| mkdir(path)) == DoesntExist
  test assert capture(|-| mkdir(make_temp_dir())) == Exists
  test assert capture(|-| mkdir(write_temp(""))) == Exists
])

mkdir_p_test : Test
mkdir_p_test = group([
  test
    let path = Path.join(make_temp_dir(), "new")
    mkdir_p(path)
    assert stat(path).type == Directory
  // @example
  test
    let path = Path.join_all([make_temp_dir(), "new", "sub"])
    mkdir_p(path)
    assert stat(path).type == Directory
  test
    let path = make_temp_dir()
    mkdir_p(path)
    assert stat(path).type == Directory
  test assert capture(|-| mkdir_p(write_temp(""))) == Exists
])

exists_test : Test
exists_test = group([
  // @example
  test assert exists?(write_temp(""))
  // @example
  test assert exists?(make_temp_dir())
  // @example
  test assert !exists?(Path.join(make_temp_dir(), "new"))
  // @example
  test assert !exists?("asdf")
])

stat_test : Test
stat_test = group([
  // @example
  test
    let contents = "hello"
    let path = write_temp(contents)
    let mode = Mode {
      owner = AllowRead
      group = AllowRead
      other = AllowRead
    }
    chmod(path, mode)

    let meta = stat(path)
    assert meta.size == length(contents)
    assert meta.type == Regular
    assert meta.mode == mode

  test
    let path = make_temp_dir()
    // Directories can only be AllowReadWrite on Windows.
    let perms = if OS.windows? then AllowReadWrite else AllowAll
    let mode = Mode {
      owner = perms
      group = perms
      other = perms
    }

    chmod(path, mode)
    let meta = stat(path)
    assert meta.type == Directory
    assert meta.mode == mode

  // Symlinks are resolved.
  test
    let contents = "foo"
    let path = write_temp(contents)
    let new_path = Path.join(make_temp_dir(), "new")
    ln_s(path, new_path)

    let meta = stat(new_path)
    assert meta.size == length(contents)
    assert meta.type == Regular

  test assert capture(|-| stat("asdf")) == DoesntExist
])

lstat_test : Test
lstat_test = group([
  test
    let contents = "hello"
    let path = write_temp(contents)
    let mode = Mode {
      owner = AllowRead
      group = AllowRead
      other = AllowRead
    }
    chmod(path, mode)

    let meta = lstat(path)
    assert meta.size == length(contents)
    assert meta.type == Regular
    assert meta.mode == mode

  test
    let path = make_temp_dir()
    // Directories can only be AllowReadWrite on Windows.
    let perms = if OS.windows? then AllowReadWrite else AllowAll
    let mode = Mode {
      owner = perms
      group = perms
      other = perms
    }

    chmod(path, mode)
    let meta = lstat(path)
    assert meta.type == Directory
    assert meta.mode == mode

  // Symlinks aren't resolved.
  // @example
  test
    let path = write_temp("foo")
    let new_path = Path.join(make_temp_dir(), "new")
    ln_s(path, new_path)

    let meta = lstat(new_path)
    assert meta.type == Symlink

  test assert capture(|-| lstat("asdf")) == DoesntExist
])

open_test : Test
open_test = group([
  // @example
  test
    let h = open(write_temp("hey\nthere"), Read)
    ensure close(h) after
      assert read(h, All) == "hey\nthere"

  test
    let path = write_temp("hey\nthere")
    let h = open(path, Append)
    assert read_path(path) == "hey\nthere"

    ensure close(h) after
      write(h, "where")
    assert read_path(path) == "hey\ntherewhere"

  test
    let path = write_temp("hey\nthere")
    let h = open(path, ReadWrite)
    assert read_path(path) == "hey\nthere"

    ensure close(h) after
      assert read(h, Chars(3)) == "hey"
      write(h, "where")
      assert read(h, All) == "e"
    assert read_path(path) == "heywheree"

  test assert capture(|-| open(write_temp(""), Exclusive)) == Exists

  test
    let new_path = Path.join(make_temp_dir(), "new")
    let h = open(new_path, Exclusive)
    ensure close(h) after write(h, "hey\nthere")
    assert read_path(new_path) == "hey\nthere"
])

close_test : Test
close_test = group([
  // @example
  test
    let path = write_temp("")
    let h = open(path, Write)

    ensure close(h) after
      write(h, "hello")
    assert read_path(path) == "hello"
])

read_test : Test
read_test = group([
  test
    let h = open(write_temp("hey\nthere"), Read)
    ensure close(h) after
      assert read(h, Chars(3)) == "hey"
      assert read(h, Chars(20)) == "\nthere"
      assert capture(|-| read(h, Chars(1))) == EndOfFile

  test
    let h = open(write_temp("hey\nthere"), Read)
    ensure close(h) after
      assert read(h, Line) == "hey\n"
      assert read(h, Line) == "there"
      assert capture(|-| read(h, Line)) == EndOfFile

  test
    let h = open(write_temp("hey\nthere"), Read)
    ensure close(h) after
      assert read(h, All) == "hey\nthere"
      assert capture(|-| read(h, All)) == EndOfFile

  // @example
  test
    let h = open(write_temp("hey\nthere"), Read)
    ensure close(h) after
      assert read(h, Line) == "hey\n"
      assert read(h, Chars(2)) == "th"
      assert read(h, All) == "ere"
])

write_test : Test
write_test = group([
  // @example
  test
    let path = write_temp("hey\nthere")
    let h = open(path, Write)

    // File should be truncated.
    assert read_path(path) == ""

    ensure close(h) after
      write(h, "hello\n")
      write(h, "foo")
      write(h, "end")
    assert read_path(path) == "hello\nfooend"
])

seek_test : Test
seek_test = group([
  // @example
  test
    let path = write_temp("hey\nthere")
    let h = open(path, ReadWrite)

    ensure close(h) after
      seek(h, 4)
      write(h, "where")
    assert read_path(path) == "hey\nwhere"
])

seek_end_test : Test
seek_end_test = group([
  // @example
  test
    let contents = "hey\nthere"
    let path = write_temp(contents)
    let h = open(path, ReadWrite)

    ensure close(h) after
      let end = seek_end(h)
      assert end == length(contents)
      assert tell(h) == end
      write(h, "where")
    assert read_path(path) == "hey\ntherewhere"
])

tell_test : Test
tell_test = group([
  // @example
  test
    let h = open(write_temp("hey\nthere"), ReadWrite)
    ensure close(h) after
      assert tell(h) == 0
      assert read(h, Line) == "hey\n"
      assert tell(h) == 4

      write(h, "foo")
      assert tell(h) == 7

      seek(h, 2)
      assert tell(h) == 2
      assert read(h, All) == "y\nfoore"
])

truncate_test : Test
truncate_test = group([
  test
    let path = write_temp("hey\nthere")
    let h = open(path, ReadWrite)

    ensure close(h) after
      truncate(h)
    assert read_path(path) == ""

  // @example
  test
    let path = write_temp("hey\nthere")
    let h = open(path, ReadWrite)

    ensure close(h) after
      seek(h, 4)
      truncate(h)
    assert read_path(path) == "hey\n"
])

// Hard to test this in a more comprehensive way; we can't cd because that could
// affect other tests running in parallel.
cwd_test : Test
cwd_test =
  let path = Path.join(cwd(), "rebar.config")
  test assert stat(path).type == Regular

// Hard to test cd because it can affect other tests running in parallel; just
// check failure cases.
cd_test : Test
cd_test = group([
  test
    let orig_cwd = cwd()
    assert capture(|-| cd("asdf")) == DoesntExist
    assert cwd() == orig_cwd

  test
    let orig_cwd = cwd()
    let exc = if OS.windows? then DoesntExist else NotDirectory
    assert capture(|-| cd(write_temp(""))) == exc
    assert cwd() == orig_cwd
])

make_temp_dir_test : Test
make_temp_dir_test = group([
  // @example
  test
    let path = make_temp_dir()
    assert Path.dir(path) == sys_temp_dir
    assert ls(path) == []
])

write_temp_test : Test
write_temp_test = group([
  // @example
  test
    let path = write_temp("foo")
    assert Path.dir(path) == sys_temp_dir
    assert read_path(path) == "foo"
])

ln_test : Test
ln_test = group([
  // @example
  test
    let path = write_temp("foo")
    let new_path = Path.join(make_temp_dir(), "new")

    ln(path, new_path)
    assert read_path(new_path) == "foo"

    // Hard link should be maintained even when original is deleted.
    rm(path)
    assert read_path(new_path) == "foo"

  test
    let path = Path.join(make_temp_dir(), "orig")
    let new_path = Path.join(make_temp_dir(), "new")
    assert capture(|-| ln(path, new_path)) == DoesntExist

  test
    let path = write_temp("")
    let new_path = write_temp("")
    assert capture(|-| ln(path, new_path)) == Exists
])

ln_s_test : Test
ln_s_test = group([
  // @example
  test
    let path = write_temp("foo")
    let new_path = Path.join(make_temp_dir(), "new")

    ln_s(path, new_path)
    assert lstat(new_path).type == Symlink
    assert stat(new_path).type == Regular
    assert read_path(new_path) == "foo"

  test
    let path = write_temp("")
    let new_path = Path.join(make_temp_dir(), "new")

    ln_s(path, new_path)
    rm(path)
    assert !exists?(new_path)

  test
    let path = make_temp_dir()
    let new_path = Path.join(make_temp_dir(), "new")

    ln_s(path, new_path)
    assert lstat(new_path).type == Symlink
    assert stat(new_path).type == Directory
    assert ls(new_path) == []

  test
    let path = Path.join(make_temp_dir(), "orig")
    let new_path = Path.join(make_temp_dir(), "new")

    ln_s(path, new_path)
    assert !exists?(new_path)

  test
    let path = write_temp("")
    let new_path = write_temp("")
    assert capture(|-| ln_s(path, new_path)) == Exists
])

readlink_test : Test
readlink_test = group([
  // @example
  test
    let path = write_temp("")
    let new_path = Path.join(make_temp_dir(), "new")
    ln_s(path, new_path)
    assert readlink(new_path) == path

  // Hardlinks cannot be resolved with readlink.
  test
    let path = write_temp("")
    let new_path = Path.join(make_temp_dir(), "new")
    ln(path, new_path)
    assert capture(|-| readlink(new_path)) == InvalidArgument

  test assert capture(|-| readlink("asdf")) == DoesntExist
  test assert capture(|-| readlink(write_temp(""))) == InvalidArgument
])

chmod_test : Test
chmod_test = group([
  // @example
  test
    let path = write_temp("")
    let new_mode = Mode {
      owner = AllowReadWrite
      group = AllowExec
      other = AllowNone
    }
    chmod(path, new_mode)

    if OS.windows? then
      assert stat(path).mode.owner == AllowReadWrite
    else
      assert stat(path).mode == new_mode

  test
    let new_mode = Mode {
      owner = AllowRead
      group = AllowRead
      other = AllowRead
    }
    assert capture(|-| chmod("asdf", new_mode)) == DoesntExist
])

chmod_windows_test : Test
chmod_windows_test =
  if OS.windows? then
    group([
      test
        let path = write_temp("")
        let new_mode = Mode {
          owner = AllowExec
          group = AllowExec
          other = AllowExec
        }
        assert capture(|-| chmod(path, new_mode)) ==
          InvalidWindowsPermissions(AllowExec)

      test
        let path = write_temp("")
        let new_mode = Mode {
          owner = AllowAll
          group = AllowAll
          other = AllowAll
        }
        assert capture(|-| chmod(path, new_mode)) ==
          InvalidWindowsPermissions(AllowAll)

      test
        let path = make_temp_dir()
        let new_mode = Mode {
          owner = AllowRead
          group = AllowRead
          other = AllowRead
        }

        // Directories are always AllowReadWrite on Windows.
        assert capture(|-| chmod(path, new_mode)) ==
          InvalidWindowsPermissions(AllowRead)
    ])
  else
    test ok

chown_test : Test
chown_test = group([
  test
    let path = write_temp("")
    // If we're running as root, we can test this. Otherwise, just ensure we
    // get a permission error.
    if !OS.windows? && root? then
      chown(path, 1)
      assert stat(path).uid == 1
    else
      assert capture(|-| chown(path, 0)) == NotPermitted
])

chgrp_test : Test
chgrp_test = group([
  test
    let path = write_temp("")
    // If we're running as root, we can test this. Otherwise, just ensure we get
    // a permission error. Technically, a non-root user should be able to chgrp
    // to any group that he/she is a member of, but we don't know which groups
    // those are without doing more work, and there may not be multiple.
    if !OS.windows? && root? then
      chgrp(path, 1)
      assert stat(path).gid == 1
    else
      // We use the daemon group (1), which users should not be a part of.
      assert capture(|-| chgrp(path, 1)) == NotPermitted

  test
    let path = write_temp("")
    assert capture(|-| chgrp(path, -1)) == NotPermitted
])

root? : Bool
root? =
  if OS.windows? then
    let denied? = String.to_chars("reg query \"HKU\\S-1-5-19\"")
      |> @os:cmd/1
      |> String.from_chars
      |> String.starts_with?("ERROR:")
    !denied?
  else
    let uid = String.to_chars("id -u")
      |> @os:cmd/1
      |> String.from_chars
      |> String.strip
      |> to_int
    uid == 0
