module PathTest

import Path (*)
import Test (group, capture, ok)

base_test : Test
base_test = group([
  // @example
  test assert base("/foo/bar/baz.txt") == "baz.txt"
  // @example
  test assert base("foo/bar.pdf") == "bar.pdf"
  test assert base("/foo") == "foo"
  // @example
  test assert base("foo") == "foo"
  // @example
  test assert base("/") == ""
  test assert base("") == ""
])

base_windows_test : Test
base_windows_test =
  if OS.windows? then
    group([
      test assert base("c:/foo/bar/baz.txt") == "baz.txt"
      test assert base("c:/foo") == "foo"
      test assert base("c:/") == ""
    ])
  else
    test ok

dir_test : Test
dir_test = group([
  // @example
  test assert dir("/foo/bar/baz.txt") == "/foo/bar"
  // @example
  test assert dir("foo/bar.pdf") == "foo"
  test assert dir("/foo") == "/"
  // @example
  test assert dir("foo") == "."
  // @example
  test assert dir("/") == "/"
  test assert dir("") == "."
])

dir_windows_test : Test
dir_windows_test =
  if OS.windows? then
    group([
      test assert dir("c:/foo/bar/baz.txt") == "c:/foo/bar"
      test assert dir("c:/foo") == "c:/"
      test assert dir("c:/") == "c:/"
    ])
  else
    test ok

ext_test : Test
ext_test = group([
  // @example
  test assert ext("/foo/bar/baz.txt") == ".txt"
  // @example
  test assert ext("foo/bar.pdf") == ".pdf"
  test assert ext("/foo") == ""
  // @example
  test assert ext("foo") == ""
  // @example
  test assert ext("/") == ""
  test assert ext("") == ""
])

ext_windows_test : Test
ext_windows_test =
  if OS.windows? then
    group([
      test assert ext("c:/foo/bar/baz.txt") == ".txt"
      test assert ext("c:/foo") == ""
      test assert ext("c:/") == ""
    ])
  else
    test ok

strip_ext_test : Test
strip_ext_test = group([
  // @example
  test assert strip_ext("/foo/bar/baz.txt") == "/foo/bar/baz"
  // @example
  test assert strip_ext("foo/bar.pdf") == "foo/bar"
  test assert strip_ext("/foo") == "/foo"
  // @example
  test assert strip_ext("foo") == "foo"
  // @example
  test assert strip_ext("/") == "/"
  test assert strip_ext("") == ""
])

strip_ext_windows_test : Test
strip_ext_windows_test =
  if OS.windows? then
    group([
      test assert strip_ext("c:/foo/bar/baz.txt") == "c:/foo/bar/baz"
      test assert strip_ext("c:/foo") == "c:/foo"
      test assert strip_ext("c:/") == "c:/"
    ])
  else
    test ok

normalize_test : Test
normalize_test = group([
  test assert normalize("") == "."
  test assert normalize("foo/bar") == "foo/bar"
  // @example
  test assert normalize("foo//bar") == "foo/bar"
  test assert normalize("foo/.") == "foo"
  test assert normalize("foo/./bar") == "foo/bar"
  // @example
  test assert normalize("foo/../bar") == "bar"
  test assert normalize("/foo/./bar/..") == "/foo"
  // @example
  test assert normalize("../foo/./../bar/../..") == "../.."
  // @example
  test assert normalize("/.././/..//foo///bar") == "/foo/bar"
])

normalize_windows_test : Test
normalize_windows_test =
  if OS.windows? then
    group([
      test assert normalize("c:/foo/./bar/..") == "c:/foo"
      test assert normalize("c:/.././/..//foo///bar") == "c:/foo/bar"
    ])
  else
    test ok

to_absolute_test : Test
to_absolute_test = group([
  // @example
  test assert to_absolute("foo") == join(File.cwd(), "foo")
  // @example
  test
    if OS.windows? then
      assert to_absolute("c:/foo/bar") == "c:/foo/bar"
    else
      assert to_absolute("/foo/bar") == "/foo/bar"
  // @example
  test assert to_absolute("foo/.//../bar//./baz") ==
    join_all([File.cwd(), "bar", "baz"])
])

to_relative_test : Test
to_relative_test = group([
  // @example
  test assert to_relative("foo", "foo") == ""
  // @example
  test assert to_relative("bar", "foo") == "../bar"
  // @example
  test assert to_relative("foo/a.txt", "foo/bar/baz") == "../../a.txt"
  // @example
  test assert to_relative("foo/bar", "foo") == "bar"
  test
    let parts = File.cwd()
      |> split
      |> map(|_| "..")
      |> List.range(1, -1)
    assert to_relative("/foo/bar", "") == join_all(parts ++ ["foo", "bar"])
  test assert to_relative("baz", "/foo/bar") ==
    join_all(["..", "..", File.cwd(), "baz"])
])

to_relative_windows_test : Test
to_relative_windows_test =
  if OS.windows? then
    group([
      test
        let parts = File.cwd()
          |> split
          |> map(|_| "..")
          |> List.range(1, -1)
        assert to_relative("c:/foo/bar", "") == join_all(parts ++ ["foo", "bar"])
      test assert to_relative("baz", "c:/foo/bar") ==
        join_all(["..", "..", File.cwd(), "baz"])
    ])
  else
    test ok

absolute_test : Test
absolute_test = group([
  // @example
  test assert !absolute?("foo")
  // @example
  test assert !absolute?("foo/.//../bar//./baz")
  // @example
  test
    if OS.windows? then
      assert absolute?("c:/foo/bar")
    else
      assert absolute?("/foo/bar")
])

relative_test : Test
relative_test = group([
  // @example
  test assert relative?("foo")
  // @example
  test assert relative?("foo/.//../bar//./baz")
  // @example
  test
    if OS.windows? then
      assert !relative?("c:/foo/bar")
    else
      assert !relative?("/foo/bar")
])

join_test : Test
join_test = group([
  // @example
  test assert join("foo", "bar") == "foo/bar"
  // @example
  test assert join("/foo/bar", "baz/a.txt") == "/foo/bar/baz/a.txt"
  // @example
  test assert join("", "bar") == "/bar"
  // @example
  test assert join("foo", "") == "foo"
])

join_windows_test : Test
join_windows_test =
  if OS.windows? then
    group([
      test assert join("c:/foo/bar", "baz/a.txt") == "c:/foo/bar/baz/a.txt"
    ])
  else
    test ok

join_all_test : Test
join_all_test = group([
  // @example
  test assert join_all(["foo", "bar", "/baz"]) == "foo/bar/baz"
  test assert join_all(["foo", "/bar"]) == "foo/bar"
  // @example
  test assert join_all(["/foo/bar", "baz/a.txt"]) == "/foo/bar/baz/a.txt"
  // @example
  test assert join_all(["", "bar"]) == "/bar"
  // @example
  test assert join_all(["foo", "", "bar", ""]) == "foo/bar"
  test assert join_all(["foo"]) == "foo"
  test assert join_all([]) == ""
])

join_all_windows_test : Test
join_all_windows_test =
  if OS.windows? then
    group([
      test assert join_all(["foo", "bar", "c:/baz"]) == "foo/bar/baz"
      test assert join_all(["foo", "c:/bar"]) == "foo/bar"
      test assert join_all(["c:/foo/bar", "baz/a.txt"]) == "c:/foo/bar/baz/a.txt"
    ])
  else
    test ok

split_test : Test
split_test = group([
  // @example
  test assert split("foo/bar") == ["foo", "bar"]
  // @example
  test assert split("/foo/bar/baz/a.txt") == ["/", "foo", "bar", "baz", "a.txt"]
  // @example
  test assert split("foo") == ["foo"]
  test assert split("foo//bar") == ["foo", "bar"]
  test assert split("") == []
])

split_windows_test : Test
split_windows_test =
  if OS.windows? then
    group([
      test assert split("c:/foo/bar/baz/a.txt") ==
        ["c:/", "foo", "bar", "baz", "a.txt"]
    ])
  else
    test ok
