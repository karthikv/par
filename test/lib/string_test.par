module StringTest

import Test (group, capture)

to_chars_test : Test
to_chars_test = group([
  // @example
  test assert String.to_chars("foo BAR") == ['f', 'o', 'o', ' ', 'B', 'A', 'R']
  // @example
  test assert String.to_chars("åäö") == ['å', 'ä', 'ö']
  // @example
  test assert String.to_chars("") == []
])

from_chars_test : Test
from_chars_test = group([
  // @example
  test assert String.from_chars(['f', 'o', 'o', ' ', 'B', 'A', 'R']) ==
    "foo BAR"
  // @example
  test assert String.from_chars(['å', 'ä', 'ö']) == "åäö"
  // @example
  test assert String.from_chars([]) == ""
])

capitalize_test : Test
capitalize_test = group([
  // @example
  test assert String.capitalize("foo BAR") == "Foo BAR"
  // @example
  test assert String.capitalize("Foo BAR") == "Foo BAR"
  // @example
  test assert String.capitalize("158") == "158"
  // @example
  test assert String.capitalize("") == ""
])

to_lower_test : Test
to_lower_test = group([
  // @example
  test assert String.to_lower("foo BAR") == "foo bar"
  // @example
  test assert String.to_lower("158") == "158"
  // @example
  test assert String.to_lower("") == ""
])

to_upper_test : Test
to_upper_test = group([
  // @example
  test assert String.to_upper("foo BAR") == "FOO BAR"
  // @example
  test assert String.to_upper("158") == "158"
  // @example
  test assert String.to_upper("") == ""
])

lstrip_test : Test
lstrip_test = group([
  // @example
  test assert String.lstrip(" \n\tfoo bar") == "foo bar"
  test assert String.lstrip(" \r\n\tfoo bar") == "foo bar"
  test assert String.lstrip("foo bar \t\n") == "foo bar \t\n"
  test assert String.lstrip("foo bar \t\r\n") == "foo bar \t\r\n"
  test assert String.lstrip(" \n\tfoo bar \t\n") == "foo bar \t\n"
  // @example
  test assert String.lstrip(" \r\n\tfoo bar \t\r\n") == "foo bar \t\r\n"
  // @example
  test assert String.lstrip("") == ""
])

rstrip_test : Test
rstrip_test = group([
  test assert String.rstrip(" \n\tfoo bar") == " \n\tfoo bar"
  test assert String.rstrip(" \r\n\tfoo bar") == " \r\n\tfoo bar"
  // @example
  test assert String.rstrip("foo bar \t\n") == "foo bar"
  test assert String.rstrip("foo bar \t\r\n") == "foo bar"
  test assert String.rstrip(" \n\tfoo bar \t\n") == " \n\tfoo bar"
  // @example
  test assert String.rstrip(" \r\n\tfoo bar \t\r\n") == " \r\n\tfoo bar"
  // @example
  test assert String.rstrip("") == ""
])

strip_test : Test
strip_test = group([
  // @example
  test assert String.strip(" \n\tfoo bar") == "foo bar"
  test assert String.strip(" \r\n\tfoo bar") == "foo bar"
  // @example
  test assert String.strip("foo bar \t\n") == "foo bar"
  test assert String.strip("foo bar \t\r\n") == "foo bar"
  test assert String.strip(" \n\tfoo bar \t\n") == "foo bar"
  // @example
  test assert String.strip(" \r\n\tfoo bar \t\r\n") == "foo bar"
  test assert String.strip("") == ""
])

slice_test : Test
slice_test = group([
  // @example
  test assert String.slice("bar", 0, 1) == "b"
  // @example
  test assert String.slice("bar", -1, 1) == "r"
  test assert String.slice("bar", 3, 0) == ""
  test assert capture(|-| String.slice("bar", 3, 1)) ==
    String.BadStringIndex(3)
  test assert capture(|-| String.slice("bar", 2, 2)) ==
    String.BadStringIndex(3)
  // @example
  test assert String.slice("bar", 0, 3) == "bar"
  // @example
  test assert String.slice("bar", -3, 2) == "ba"
  test assert String.slice("bar", -4, 0) == ""
  test assert capture(|-| String.slice("bar", -4, 1)) ==
    String.BadStringIndex(-4)
  test assert capture(|-| String.slice("bar", -1, 2)) ==
    String.BadStringIndex(3)
  test assert String.slice("", 0, 0) == ""
  test assert capture(|-| String.slice("", 0, 1)) == String.BadStringIndex(0)
])

range_test : Test
range_test = group([
  // @example
  test assert String.range("bar", 0, 1) == "ba"
  // @example
  test assert String.range("bar", -1, 2) == "r"
  // @example
  test assert String.range("bar", 2, -2) == ""
  test assert String.range("bar", 3, 1) == ""
  test assert capture(|-| String.range("bar", 2, 3)) ==
    String.BadStringIndex(3)
  test assert String.range("bar", 0, 2) == "bar"
  test assert String.range("bar", -3, 1) == "ba"
  test assert capture(|-| String.range("bar", -4, 0)) ==
    String.BadStringIndex(-4)
  test assert String.range("bar", 0, -4) == ""
  test assert capture(|-| String.range("", 0, 0)) == String.BadStringIndex(0)
  test assert String.range("", 1, 0) == ""
])

lines_test : Test
lines_test = group([
  // @example
  test assert String.lines("foo bar") == ["foo bar"]
  // @example
  test assert String.lines("foo\nbar") == ["foo", "bar"]
  test assert String.lines("foo\r\nbar") == ["foo", "bar"]
  test assert String.lines("foo\nbar\n") == ["foo", "bar"]
  // @example
  test assert String.lines("foo\r\nbar\r\n") == ["foo", "bar"]
  test assert String.lines("\nfoo bar") == ["", "foo bar"]
  // @example
  test assert String.lines("\r\nfoo bar") == ["", "foo bar"]
  test assert String.lines("\r\nfoo\nbar\r\n") == ["", "foo", "bar"]
  test assert String.lines("\n") == []
  test assert String.lines("\r\n") == []
  test assert String.lines("\n\n") == []
  // @example
  test assert String.lines("\r\n\r\n") == []
  test assert String.lines("") == []
])

reverse_test : Test
reverse_test = group([
  // @example
  test assert String.reverse("foo bar") == "rab oof"
  // @example
  test assert String.reverse("") == ""
])

starts_with_test : Test
starts_with_test = group([
  test assert String.starts_with?("foo bar", "f")
  // @example
  test assert String.starts_with?("foo bar", "foo ")
  // @example
  test assert String.starts_with?("foo bar", "")
  // @example
  test assert !String.starts_with?("foo bar", "asdf")
  // @example
  test assert !String.starts_with?("foo bar", "F")
  test assert !String.starts_with?("foo bar", "bar")
  test assert !String.starts_with?("foo bar", "oo")
])

ends_with_test : Test
ends_with_test = group([
  // @example
  test assert String.ends_with?("foo bar", "r")
  // @example
  test assert String.ends_with?("foo bar", "bar")
  // @example
  test assert !String.ends_with?("foo bar", "")
  // @example
  test assert !String.ends_with?("foo bar", "asdf")
  test assert !String.ends_with?("foo bar", "R")
  test assert !String.ends_with?("foo bar", "foo")
  test assert !String.ends_with?("foo bar", "ba")
])

substr_test : Test
substr_test = group([
  // @example
  test assert String.substr?("foo bar", "r")
  // @example
  test assert String.substr?("foo bar", "bar")
  test assert String.substr?("foo bar", "")
  // @example
  test assert !String.substr?("foo bar", "flo")
  // @example
  test assert !String.substr?("foo bar", "R")
])

re_test : Test
re_test = group([
  test assert capture(|-| String.re(`?`, [])) ==
    String.BadRegex({ reason = "nothing to repeat", index = 0 })
  test assert capture(|-| String.re(`a(b`, [])) ==
    String.BadRegex({ reason = "missing )", index = 3 })
  test assert capture(|-| String.re(`a(?q)b`, [])) == String.BadRegex({
    reason = "unrecognized character after (? or (?-"
    index = 3
  })
])

matches_test : Test
matches_test = group([
  // @example
  test assert String.matches?("foo bar", String.re(`ba`, []))
  // @example
  test assert String.matches?("foo bar", String.re(`\w+`, []))
  // @example
  test assert String.matches?(
    "foo bar",
    String.re(`FO{2}\s`, [String.Caseless])
  )
  test assert String.matches?(
    "foo\nbar",
    String.re(`^bar$`, [String.Multiline])
  )
  test assert String.matches?("foo\nbar", String.re(`.bar`, [String.DotAll]))
  test assert String.matches?(
    "foo bar",
    String.re(`f  o   o`, [String.Extended])
  )
  test assert String.matches?("foo bar", String.re(``, []))
  // @example
  test assert !String.matches?("foo bar", String.re(`Bar`, []))
  test assert !String.matches?("foo bar", String.re(`R`, []))
  // @example
  test assert !String.matches?("foo bar", String.re(`o{3}`, []))
  test assert !String.matches?("foo\nbar", String.re(`^bar$`, []))
  test assert !String.matches?("foo\nbar", String.re(`.bar`, []))
  test assert !String.matches?(
    "foo bar",
    String.re(`o  b  \na`, [String.Extended]
  ))
  test assert !String.matches?("foo bar", String.re(`fo\b`, []))
])

search_test : Test
search_test = group([
  test assert String.search("foo bar", String.re(`ba`, [])) == ["ba"]
  // @example
  test assert String.search("foo bar", String.re(`\w+`, [])) == ["foo"]
  // @example
  test assert String.search("foo bar", String.re(`foo (\w{2})`, [])) ==
    ["foo ba", "ba"]
  test assert String.search(
    "foo bar",
    String.re(`O\s`, [String.Caseless])
  ) == ["o "]
  // @example
  test assert String.search(
    "foo\nbar",
    String.re(`^bar$`, [String.Multiline])
  ) == ["bar"]
  // @example
  test assert String.search(
    "foo bar",
    String.re(`f  o   o`, [String.Extended])
  ) == ["foo"]
  test assert String.search("foo bar", String.re(``, [])) == [""]
  // @example
  test assert String.search("foo bar", String.re(`Bar`, [])) == []
  test assert String.search("foo bar", String.re(`o{3}`, [])) == []
])

search_all_test : Test
search_all_test = group([
  test assert String.search_all("foo bar", String.re(`ba`, [])) == [["ba"]]
  // @example
  test assert String.search_all("foo bar", String.re(`\w+`, [])) ==
    [["foo"], ["bar"]]
  // @example
  test assert String.search_all("foo bar", String.re(`\w(\w)`, [])) ==
    [["fo", "o"], ["ba", "a"]]
  // @example
  test assert String.search_all(
    "foo bar",
    String.re(`O`, [String.Caseless])
  ) == [["o"], ["o"]]
  test assert String.search_all(
    "foo\nbar",
    String.re(`^bar$`, [String.Multiline])
  ) == [["bar"]]
  test assert String.search_all(
    "foo bar",
    String.re(`f  o   o`, [String.Extended])
  ) == [["foo"]]
  test assert String.search_all("foo bar", String.re(``, [])) ==
    [[""], [""], [""], [""], [""], [""], [""], [""]]
  // @example
  test assert String.search_all("foo bar", String.re(`Bar`, [])) == []
  test assert String.search_all("foo bar", String.re(`o{3}`, [])) == []
])

span_test : Test
span_test = group([
  test assert String.span("foo bar", "r") == Some(("foo ba", ""))
  // @example
  test assert String.span("foo bar", "bar") == Some(("foo ", ""))
  // @example
  test assert String.span("foo bar", "o") == Some(("f", "o bar"))
  test assert String.span("foo bar", "foo bar") == Some(("", ""))
  test assert String.span("foo bar", "") == None
  // @example
  test assert String.span("foo bar", "flo") == None
  test assert String.span("foo bar", "R") == None
])

rspan_test : Test
rspan_test = group([
  test assert String.rspan("foo bar", "r") == Some(("foo ba", ""))
  // @example
  test assert String.rspan("foo bar", "bar") == Some(("foo ", ""))
  // @example
  test assert String.rspan("foo bar", "o") == Some(("fo", " bar"))
  test assert String.rspan("foo bar", "foo bar") == Some(("", ""))
  test assert String.rspan("foo bar", "") == None
  // @example
  test assert String.rspan("foo bar", "flo") == None
  test assert String.rspan("foo bar", "R") == None
])

search_span_test : Test
search_span_test = group([
  // @example
  test assert String.search_span("foo bar", String.re(`ba`, [])) ==
    Some(("foo ", [], "r"))
  // @example
  test assert String.search_span("foo bar", String.re(`(\w+)`, [])) ==
    Some(("", ["foo"], " bar"))
  // @example
  test assert String.search_span("foo bar", String.re(`\w(\w)`, [])) ==
    Some(("", ["o"], "o bar"))
  test assert String.search_span(
    "foo bar",
    String.re(`O`, [String.Caseless])
  ) == Some(("f", [], "o bar"))
  test assert String.search_span(
    "foo\nbar",
    String.re(`(^b)a(r$)`, [String.Multiline])
  ) == Some(("foo\n", ["b", "r"], ""))
  test assert String.search_span(
    "foo bar",
    String.re(`(f  o   o)`, [String.Extended])
  ) == Some(("", ["foo"], " bar"))
  test assert String.search_span("foo bar", String.re(``, [])) == None
  // @example
  test assert String.search_span("foo bar", String.re(`Bar`, [])) == None
  test assert String.search_span("foo bar", String.re(`o{3}`, [])) == None
])

splitn_test : Test
splitn_test = group([
  test assert String.splitn("foo bar", "r", 2) == ["foo ba", ""]
  // @example
  test assert String.splitn("foo bar", "o", 2) == ["f", "o bar"]
  // @example
  test assert String.splitn("foo bar", "bar", 10) == ["foo ", ""]
  test assert String.splitn("foo bar", "", 1) == ["foo bar"]
  test assert String.splitn("foo bar", "", 2) == ["f", "oo bar"]
  test assert String.splitn("foo bar", "", -1) ==
    ["f", "o", "o", " ", "b", "a", "r"]
  test assert String.splitn("foo bar", "foo bar", 0) == ["", ""]
  test assert String.splitn("foo bar", "flo", 3) == ["foo bar"]
  test assert String.splitn("foo bar", "R", 7) == ["foo bar"]
  test assert String.splitn("", "o", 5) == []

  test assert String.splitn("foo bar", String.re(`ba`, []), 3) == ["foo ", "r"]
  // @example
  test assert String.splitn("foo bar", String.re(`(\w+)`, []), 2) ==
    ["", "foo", " bar"]
  test assert String.splitn(
    "foo bar",
    String.re(`O\s`, [String.Caseless]),
    2
  ) == ["fo", "bar"]
  // @example
  test assert String.splitn(
    "foo\nbar",
    String.re(`^bar$`, [String.Multiline]),
    1
  ) == ["foo\nbar"]
  test assert String.splitn(
    "foo bar",
    String.re(`f  o   o`, [String.Extended]),
    0
  ) == ["", " bar"]
  // @example
  test assert String.splitn("foo bar", String.re(``, []), -1) ==
    ["f", "o", "o", " ", "b", "a", "r"]
  test assert String.splitn("foo bar", String.re(`foo bar`, []), 2) == ["", ""]
  test assert String.splitn("foo bar", String.re(`Bar`, []), 1) == ["foo bar"]
  test assert String.splitn("foo bar", String.re(`o{3}`, []), 8) == ["foo bar"]
  test assert String.splitn("", String.re(``, []), 1) == []
])

split_test : Test
split_test = group([
  // @example
  test assert String.split("foo bar", " ") == ["foo", "bar"]
  test assert String.split("foo bar", "r") == ["foo ba", ""]
  test assert String.split("foo bar", "bar") == ["foo ", ""]
  // @example
  test assert String.split("foo bar", "o") == ["f", "", " bar"]
  test assert String.split("foo bar", "") ==
    ["f", "o", "o", " ", "b", "a", "r"]
  test assert String.split("foo bar", "foo bar") == ["", ""]
  test assert String.split("foo bar", "flo") == ["foo bar"]
  test assert String.split("foo bar", "R") == ["foo bar"]
  test assert String.split("", "o") == []

  test assert String.split("foo bar", String.re(`ba`, [])) == ["foo ", "r"]
  // @example
  test assert String.split("foo bar", String.re(`(\w+)`, [])) ==
    ["", "foo", " ", "bar", ""]
  test assert String.split("foo bar", String.re(`O\s`, [String.Caseless])) ==
    ["fo", "bar"]
  test assert String.split(
    "foo\nbar",
    String.re(`^bar$`, [String.Multiline])
  ) == ["foo\n", ""]
  test assert String.split(
    "foo bar",
    String.re(`f  o   o`, [String.Extended])
  ) == ["", " bar"]
  // @example
  test assert String.split("foo bar", String.re(``, [])) ==
    ["f", "o", "o", " ", "b", "a", "r"]
  test assert String.split("foo bar", String.re(`foo bar`, [])) == ["", ""]
  test assert String.split("foo bar", String.re(`Bar`, [])) == ["foo bar"]
  test assert String.split("foo bar", String.re(`o{3}`, [])) == ["foo bar"]
  test assert String.split("", String.re(`\w`, [])) == []
])

replace_test : Test
replace_test = group([
  // @example
  test assert String.replace("foo bar", "r", "cat") == "foo bacat"
  test assert String.replace("foo bar", "bar", "baz") == "foo baz"
  // @example
  test assert String.replace("foo bar", "o", "i") == "fii bar"
  test assert String.replace("foo bar", "", " ") == " f o o   b a r "
  // @example
  test assert String.replace("foo bar", "flo", "abc") == "foo bar"
  test assert String.replace("foo bar", "R", "def") == "foo bar"

  test assert String.replace("foo bar", String.re(`ba`, []), "cat") ==
    "foo catr"
  // @example
  test assert String.replace("foo bar", String.re(`\w+`, []), "baz") ==
    "baz baz"
  // @example
  test assert String.replace(
    "foo bar",
    String.re(`foo (\w{2})`, []),
    `\1zaa`
  ) == "bazaar"
  test assert String.replace(
    "foo bar",
    String.re(`O\s`, [String.Caseless]),
    "i"
  ) == "foibar"
  test assert String.replace(
    "foo\nbar",
    String.re(`^bar$`, [String.Multiline]),
    "a"
  ) == "foo\na"
  test assert String.replace(
    "foo bar",
    String.re(`f  o   o`, [String.Extended]),
    ""
  ) == " bar"
  test assert String.replace(
    "foo bar",
    String.re(`f  o   o`, [String.Extended]),
    "&&"
  ) == "foofoo bar"
  test assert String.replace("foo bar", String.re(``, []), " ") ==
    " f o o   b a r "
  test assert String.replace("foo bar", String.re(`Bar`, []), "abc") ==
    "foo bar"
  test assert String.replace("foo bar", String.re(`o{3}`, []), "def") ==
    "foo bar"
])

replace_one_test : Test
replace_one_test = group([
  // @example
  test assert String.replace_one("foo bar", "r", "cat") == "foo bacat"
  test assert String.replace_one("foo bar", "bar", "baz") == "foo baz"
  // @example
  test assert String.replace_one("foo bar", "o", "i") == "fio bar"
  test assert String.replace_one("foo bar", "", " ") == " foo bar"
  // @example
  test assert String.replace_one("foo bar", "flo", "abc") == "foo bar"
  test assert String.replace_one("foo bar", "R", "def") == "foo bar"

  test assert String.replace_one("foo bar", String.re(`ba`, []), "cat") ==
    "foo catr"
  // @example
  test assert String.replace_one("foo bar", String.re(`\w+`, []), "baz") ==
    "baz bar"
  // @example
  test assert String.replace_one(
    "foo bar",
    String.re(`foo (\w{2})`, []),
    `\1zaa`
  ) == "bazaar"
  test assert String.replace_one(
    "foo bar",
    String.re(`O`, [String.Caseless]),
    "i"
  ) == "fio bar"
  test assert String.replace_one(
    "foo\nbar",
    String.re(`^bar$`, [String.Multiline]),
    "a"
  ) == "foo\na"
  test assert String.replace_one(
    "foo bar",
    String.re(`f  o   o`, [String.Extended]),
    ""
  ) == " bar"
  test assert String.replace_one(
    "foo bar",
    String.re(`f  o   o`, [String.Extended]),
    "&&"
  ) == "foofoo bar"
  test assert String.replace_one("foo bar", String.re(``, []), " ") ==
    " foo bar"
  test assert String.replace_one("foo bar", String.re(`Bar`, []), "abc") ==
    "foo bar"
  test assert String.replace_one("foo bar", String.re(`o{3}`, []), "def") ==
    "foo bar"
])
