module MapTest

import Map (*)
import Test (group, capture)

get_or_test : Test
get_or_test = group([
  // @example
  test assert get_or({ "bar" => 3.7, "baz" => 1 }, "foo", 5.02) == 5.02
  // @example
  test assert get_or({ true => 'h' }, true, 'i') == 'h'
  // @example
  test assert get_or({}, 1, [false]) == [false]
])

keys_test : Test
keys_test = group([
  // @example
  test
    let ks = keys({ "bar" => 3.7, "baz" => 1 })
    // order is undefined
    assert ks == ["bar", "baz"] || ks == ["baz", "bar"]
  // @example
  test assert keys({ true => 'h' }) == [true]
  // @example
  test assert keys({}) == []
])

values_test : Test
values_test = group([
  // @example
  test
    let vs = values({ "bar" => 3.7, "baz" => 1 })
    // order is undefined
    assert vs == [3.7, 1] || vs == [1, 3.7]
  // @example
  test assert values({ true => 'h' }) == ['h']
  // @example
  test assert values({}) == []
])

update_test : Test
update_test = group([
  test
    let f() = update({ "bar" => 3.7, "baz" => 1 }, "foo", |a| a * 2)
    assert capture(f) == BadKey
  // @example
  test assert update({ "bar" => 3.7, "baz" => 1 }, "bar", |a| a * 2) ==
    { "bar" => 7.4, "baz" => 1 }
  // @example
  test assert update({ true => 'h' }, true, |ch| to_int(ch) + 1 |> to_char) ==
    { true => 'i' }
  test assert capture(|-| update({}, true, |v| v)) == BadKey
])

upsert_test : Test
upsert_test = group([
  // @example
  test assert upsert({ "bar" => 3.7, "baz" => 1 }, "foo", 0, |a| a * 2) ==
    { "foo" => 0, "bar" => 3.7, "baz" => 1 }
  // @example
  test assert upsert({ "bar" => 3.7, "baz" => 1 }, "bar", 0, |a| a * 2) ==
    { "bar" => 7.4, "baz" => 1 }
  // @example
  test
    let f = |ch| to_int(ch) + 1 |> to_char
    assert upsert({ true => 'h' }, true, 'a', f) == { true => 'i' }
  test assert upsert({}, true, false, |v| v) == { true => false }
])

merge_test : Test
merge_test = group([
  // @example
  test assert merge({ "foo" => 7.5 }, { "bar" => 3.7, "baz" => 1 }) ==
    { "foo" => 7.5, "bar" => 3.7, "baz" => 1 }
  // @example
  test assert merge({ true => 'i', false => 'y' }, { true => 'h' }) ==
    { true => 'h', false => 'y' }
  test assert merge({ true => @true, false => @false }, {}) ==
    { true => @true, false => @false }
  // @example
  test assert merge({ @hi => 'h' }, { @hi => 'i', @hey => 'y' }) ==
    { @hi => 'i', @hey => 'y' }
  test assert merge({}, {}) == {}
])

with_test : Test
with_test = group([
  // @example
  test assert with({ "bar" => 3.7, "baz" => 1 }, ["foo"]) == {}
  // @example
  test assert with({ "bar" => 3.7, "baz" => 1 }, ["foo", "bar"]) ==
    { "bar" => 3.7 }
  test assert with({ "bar" => 3.7, "baz" => 1 }, ["baz", "foo", "bar"]) ==
    { "bar" => 3.7, "baz" => 1 }
  // @example
  test assert with({ true => 'h' }, [true]) == { true => 'h' }
  // @example
  test assert with({ true => 'h' }, []) == {}
  test assert with({}, [true]) == {}
  test assert with({}, []) == {}
])

without_test : Test
without_test = group([
  // @example
  test assert without({ "bar" => 3.7, "baz" => 1 }, ["foo"]) ==
    { "bar" => 3.7, "baz" => 1 }
  // @example
  test assert without({ "bar" => 3.7, "baz" => 1 }, ["foo", "bar"]) ==
    { "baz" => 1 }
  test assert without({ "bar" => 3.7, "baz" => 1 }, ["baz", "foo", "bar"]) == {}
  // @example
  test assert without({ true => 'h' }, [true]) == {}
  // @example
  test assert without({ true => 'h' }, []) == { true => 'h' }
  test assert without({}, [true]) == {}
  test assert without({}, []) == {}
])
