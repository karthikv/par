module MapTest

import Test (group, capture)

get_or_test : Test
get_or_test = group([
  // @example
  test assert Map.get_or({ "bar" => 3.7, "baz" => 1 }, "foo", 5.02) == 5.02
  // @example
  test assert Map.get_or({ true => 'h' }, true, 'i') == 'h'
  // @example
  test assert Map.get_or({}, 1, [false]) == [false]
])

keys_test : Test
keys_test = group([
  // @example
  test
    let ks = Map.keys({ "bar" => 3.7, "baz" => 1 })
    // order is undefined
    assert ks == ["bar", "baz"] || ks == ["baz", "bar"]
  // @example
  test assert Map.keys({ true => 'h' }) == [true]
  // @example
  test assert Map.keys({}) == []
])

values_test : Test
values_test = group([
  // @example
  test
    let vs = Map.values({ "bar" => 3.7, "baz" => 1 })
    // order is undefined
    assert vs == [3.7, 1] || vs == [1, 3.7]
  // @example
  test assert Map.values({ true => 'h' }) == ['h']
  // @example
  test assert Map.values({}) == []
])

update_test : Test
update_test = group([
  test
    let f() = Map.update({ "bar" => 3.7, "baz" => 1 }, "foo", |a| a * 2)
    assert capture(f) == BadKey
  // @example
  test assert Map.update({ "bar" => 3.7, "baz" => 1 }, "bar", |a| a * 2) ==
    { "bar" => 7.4, "baz" => 1 }
  // @example
  test assert Map.update({ true => 'h' }, true, |ch|
    to_int(ch) + 1 |> to_char
  ) == { true => 'i' }
  test assert capture(|-| Map.update({}, true, |v| v)) == BadKey
])

upsert_test : Test
upsert_test = group([
  // @example
  test assert Map.upsert({ "bar" => 3.7, "baz" => 1 }, "foo", 0, |a| a * 2) ==
    { "foo" => 0, "bar" => 3.7, "baz" => 1 }
  // @example
  test assert Map.upsert({ "bar" => 3.7, "baz" => 1 }, "bar", 0, |a| a * 2) ==
    { "bar" => 7.4, "baz" => 1 }
  // @example
  test
    let f = |ch| to_int(ch) + 1 |> to_char
    assert Map.upsert({ true => 'h' }, true, 'a', f) == { true => 'i' }
  test assert Map.upsert({}, true, false, |v| v) == { true => false }
])

merge_test : Test
merge_test = group([
  // @example
  test assert Map.merge({ "foo" => 7.5 }, { "bar" => 3.7, "baz" => 1 }) ==
    { "foo" => 7.5, "bar" => 3.7, "baz" => 1 }
  // @example
  test assert Map.merge({ true => 'i', false => 'y' }, { true => 'h' }) ==
    { true => 'h', false => 'y' }
  test assert Map.merge({ true => @true, false => @false }, {}) ==
    { true => @true, false => @false }
  // @example
  test assert Map.merge({ @hi => 'h' }, { @hi => 'i', @hey => 'y' }) ==
    { @hi => 'i', @hey => 'y' }
  test assert Map.merge({}, {}) == {}
])

with_test : Test
with_test = group([
  // @example
  test assert Map.with({ "bar" => 3.7, "baz" => 1 }, ["foo"]) == {}
  // @example
  test assert Map.with({ "bar" => 3.7, "baz" => 1 }, ["foo", "bar"]) ==
    { "bar" => 3.7 }
  test assert Map.with({ "bar" => 3.7, "baz" => 1 }, ["baz", "foo", "bar"]) ==
    { "bar" => 3.7, "baz" => 1 }
  // @example
  test assert Map.with({ true => 'h' }, [true]) == { true => 'h' }
  // @example
  test assert Map.with({ true => 'h' }, []) == {}
  test assert Map.with({}, [true]) == {}
  test assert Map.with({}, []) == {}
])

without_test : Test
without_test = group([
  // @example
  test assert Map.without({ "bar" => 3.7, "baz" => 1 }, ["foo"]) ==
    { "bar" => 3.7, "baz" => 1 }
  // @example
  test assert Map.without({ "bar" => 3.7, "baz" => 1 }, ["foo", "bar"]) ==
    { "baz" => 1 }
  test assert Map.without(
    { "bar" => 3.7, "baz" => 1 },
    ["baz", "foo", "bar"]
  ) == {}
  // @example
  test assert Map.without({ true => 'h' }, [true]) == {}
  // @example
  test assert Map.without({ true => 'h' }, []) == { true => 'h' }
  test assert Map.without({}, [true]) == {}
  test assert Map.without({}, []) == {}
])
