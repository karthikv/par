module BaseTest

import Test (group, capture)

//-- Interfaces/Implementations
sized_string_test : Test
sized_string_test = group([
  test assert length("abc") == 3
  test assert length("") == 0

  test assert !empty?("abc")
  test assert empty?("")
])

sized_list_test : Test
sized_list_test = group([
  test assert length(['a', 'b']) == 2
  test assert length([]) == 0

  test assert !empty?(['a', 'b'])
  test assert empty?([])
])

sized_set_test : Test
sized_set_test = group([
  test assert length(#[3.7]) == 1
  test assert length(#[]) == 0

  test assert !empty?(#[3.7])
  test assert empty?(#[])
])

sized_map_test : Test
sized_map_test = group([
  test assert length({ true => @hi, false => @hey }) == 2
  test assert length({}) == 0

  test assert !empty?({ true => @hi, false => @hey })
  test assert empty?({})
])

mappable_test : Test
mappable_test = group([
  test assert map(Some(3), |a| a + 1) == Some(4)
  test assert map(None, |a| a + 1) == None

  test assert map([@hi, @hey], |a| a == @hey) == [false, true]
  test assert map([], |a| a == @hey) == []

  test assert map(#[{ ch = 'a' }, { ch = 'b' }], |a| a.ch) == #['a', 'b']
  test assert map(#[], |a| a.ch) == #[]

  test assert map({ true => @hi }, |(k, v)| (v, k)) == { @hi => true }
  test assert map({}, |(k, v)| (v, k)) == {}
])

collection_list_test : Test
collection_list_test = group([
  test assert fold([1, 2, 3], 10, |a, memo| a + memo) == 16
  test assert fold([], 10, |a, memo| a + memo) == 10

  test assert filter(["cat", "dog", "mouse"], |a| a < "lion") == ["cat", "dog"]
  test assert filter([], |a| a < "lion") == []

  test assert find(['c', 'z', 'g'], |a| a > 'e') == Some('z')
  test assert find(['c', 'a'], |a| a > 'e') == None

  test assert filter_map([true, false], |a| if a then Some([a]) else None) ==
    [[true]]
  test assert filter_map([], |a| if a then Some([a]) else None) == []

  test assert map_fold(["hi", "bye"], "-", |a, s| (a ++ "!", s ++ a)) ==
    (["hi!", "bye!"], "-hibye")
  test assert map_fold([], "-", |a, s| (a ++ "!", s ++ a)) == ([], "-")

  test assert put([@second], @first) == [@first, @second]
  test assert put([], @first) == [@first]

  test assert delete([38.52, 1.7, 4, 1.7], 1.7) == [38.52, 4]
  test assert delete([38.52, 1.7, 4, 1.7], 37.0) == [38.52, 1.7, 4, 1.7]
  test assert delete([], 37.0) == []

  test assert contains?([38.52, 1.7, 4, 1.7], 1.7)
  test assert !contains?([38.52, 1.7, 4, 1.7], 37.0)
  test assert !contains?([], 37.0)

  test assert all?(['a', 'e', 'a'], |x| x == 'a' || x == 'e')
  test assert !all?(['a', 'e', 'a'], |x| x == 'a' || x == 'i')
  test assert all?([], |x| x)

  test assert any?(['a', 'e', 'a'], |x| x == 'e' || x == 'i')
  test assert !any?(['a', 'e', 'a'], |x| x == 'o' || x == 'i')
  test assert !any?([], |x| x == 'e' || x == 'i')
])

collection_test_set : Test
collection_test_set = group([
  test assert fold(#[1, 2, 3], 10, |a, memo| a + memo) == 16
  test assert fold(#[], 10, |a, memo| a + memo) == 10

  test assert filter(#["cat", "dog", "mouse"], |a| a < "lion") ==
    #["cat", "dog"]
  test assert filter(#[], |a| a < "lion") == #[]

  test
    let found = find(#['c', 'z', 'g'], |a| a > 'e')
    // order is undefined
    assert found == Some('z') || found == Some('g')
  test assert find(#['c', 'a'], |a| a > 'e') == None

  test assert filter_map(#[true, false], |a| if a then Some([a]) else None) ==
    #[[true]]
  test assert filter_map(#[], |a| if a then Some([a]) else None) == #[]

  test
    let (mapped, memo) = map_fold(#["hi", "bye"], "-", |a, s| (a ++ "!", s ++ a))
    assert mapped == #["hi!", "bye!"]
    // order is undefined
    assert memo == "-hibye" || memo == "-byehi"
  test assert map_fold(#[], "-", |a, s| (a ++ "!", s ++ a)) == (#[], "-")

  test assert put(#[@second], @first) == #[@first, @second]
  test assert put(#[], @first) == #[@first]

  test assert delete(#[38.52, 1.7, 4, 1.7], 1.7) == #[38.52, 4]
  test assert delete(#[38.52, 1.7, 4, 1.7], 37.0) == #[38.52, 1.7, 4]
  test assert delete(#[], 37.0) == #[]

  test assert contains?(#[38.52, 1.7, 4, 1.7], 1.7)
  test assert !contains?(#[38.52, 1.7, 4, 1.7], 37.0)
  test assert !contains?(#[], 37.0)

  test assert all?(#['a', 'e', 'a'], |x| x == 'a' || x == 'e')
  test assert !all?(#['a', 'e', 'a'], |x| x == 'a' || x == 'i')
  test assert all?(#[], |x| x)

  test assert any?(#['a', 'e', 'a'], |x| x == 'e' || x == 'i')
  test assert !any?(#['a', 'e', 'a'], |x| x == 'o' || x == 'i')
  test assert !any?(#[], |x| x == 'e' || x == 'i')
])

collection_test_map : Test
collection_test_map = group([
  test
    let map = { 1 => 2, 3 => 4, 5 => 6 }
    assert fold(map, 10, |(k, v), memo| k + v + memo) == 31
  test assert fold({}, 10, |(k, v), memo| k + v + memo) == 10

  test
    let map = { "cat" => @cat, "dog" => @dog, "mouse" => @mouse }
    assert filter(map, |(k, v)| k < "lion" && v == @dog) == { "dog" => @dog }
  test assert filter({}, |(k, v)| k < "lion" && v == @dog) == {}

  test
    let found = find({
      'c' => true
      'z' => false
      'g' => false
    }, |(k, v)| k > 'e' && !v)
    // order is undefined
    assert found == Some(('z', false)) || found == Some(('g', false))
  test assert find(#['c', 'a'], |a| a > 'e') == None

  test
    let map = { true => [true], false => [false] }
    assert filter_map(map, |(k, v)| if k then Some((v, k)) else None) ==
      { [true] => true }
  test assert filter_map({}, |(k, v)| if k then Some((v, k)) else None) == {}

  test
    let (mapped, memo) = map_fold(
      { "hi" => "now", "bye" => "later" },
      "-",
      |(k, v), s| ((k ++ "!", v ++ "!"), s ++ k ++ v)
    )
    assert mapped == { "hi!" => "now!", "bye!" => "later!" }
    // order is undefined
    assert memo == "-hinowbyelater" || memo == "-byelaterhinow"
  test
    let (mapped, memo) = map_fold({}, "-", |(k, v), s|
      ((k ++ "!", v ++ "!"), s ++ k ++ v)
    )
    assert (mapped, memo) == ({}, "-")

  test assert put({ @second => 2 }, (@first, 1)) == { @first => 1, @second => 2 }
  test assert put({}, (@first, 1)) == { @first => 1 }

  test assert delete({ 38.52 => 1.7, 4 => 2.9 }, (38.52, 1.7)) == { 4 => 2.9 }
  test assert delete({ 38.52 => 1.7, 4 => 2.9 }, (4, 3)) ==
    { 38.52 => 1.7, 4 => 2.9 }
  test assert delete({}, (38.52, 1.7)) == {}

  test assert contains?({ 38.52 => 1.7, 4 => 2.9 }, (38.52, 1.7))
  test assert !contains?({ 38.52 => 1.7, 4 => 2.9 }, (4, 3))
  test assert !contains?({}, (38.52, 1.7))

  test assert all?({ 'a' => 1, 'e' => 2 }, |(k, v)|
    (k == 'a' || k == 'e') && v > 0
  )
  test assert !all?({ 'a' => 1, 'e' => 2 }, |(k, v)|
    (k == 'a' || k == 'e') && v > 1
  )
  test assert !all?({ 'a' => 1, 'e' => 2 }, |(k, v)|
    (k == 'a' || k == 'i') && v > 0
  )
  test assert all?({}, |(k, v)| (k == 'a' || k == 'i') && v > 0)

  test assert any?({ 'a' => 1, 'e' => 2 }, |(k, v)| k == 'a' || v > 2)
  test assert any?({ 'a' => 1, 'e' => 2 }, |(k, v)| k == 'i' || v > 1)
  test assert !any?({ 'a' => 1, 'e' => 2 }, |(k, v)| k == 'i' || v > 2)
  test assert !any?({}, |(k, v)| k == 'i' || v > 2)
])


//-- Collections
first_test : Test
first_test = group([
  test assert first((1, 2)) == 1
  test assert first(('a', true)) == 'a'
])

second_test : Test
second_test = group([
  test assert second((1, 2)) == 2
  test assert second(('a', true)) == true
])

head_test : Test
head_test = group([
  test assert head([1]) == 1
  test assert head([@hi, @hey]) == @hi
])

tail_test : Test
tail_test = group([
  test assert tail([1]) == []
  test assert tail([@hi, @hey]) == [@hey]
])

lookup_test : Test
lookup_test = group([
  test assert lookup({ @hi => 'h' }, @hi) == Some('h')
  test assert lookup({ "bar" => 3.7, "baz" => 1 }, "foo") == None
  test assert lookup({}, true) == None
])

get_test : Test
get_test = group([
  test assert get({ @hi => 'h' }, @hi) == 'h'
  test assert capture(|-| get({ "bar" => 3.7, "baz" => 1 }, "foo")) == BadKey
  test assert capture(|-| get({}, true)) == BadKey
])

key_test : Test
key_test = group([
  test assert key?({ @hi => 'h' }, @hi)
  test assert !key?({ "bar" => 3.7, "baz" => 1 }, "foo")
  test assert !key?({}, true)
])

remove_test : Test
remove_test = group([
  test assert remove({ @hi => 'h' }, @hi) == {}
  test assert remove({ "bar" => 3.7, "baz" => 1 }, "foo") ==
    { "bar" => 3.7, "baz" => 1 }
  test assert remove({ "bar" => 3.7, "baz" => 1 }, "bar") == { "baz" => 1 }
  test assert remove({}, true) == {}
])


//-- Math
abs_test : Test
abs_test = group([
  test assert abs(1) == 1
  test assert abs(35.8) == 35.8
  test assert abs(-1) == 1
  test assert abs(-35.8) == 35.8
])

ceil_test : Test
ceil_test = group([
  test assert ceil(38.1) == 39
  test assert ceil(38.9) == 39
  test assert ceil(38) == 38
  test assert ceil(-38.1) == -38
  test assert ceil(-38.9) == -38
  test assert ceil(-38) == -38
])

floor_test : Test
floor_test = group([
  test assert floor(38.1) == 38
  test assert floor(38.9) == 38
  test assert floor(38) == 38
  test assert floor(-38.1) == -39
  test assert floor(-38.9) == -39
  test assert floor(-38) == -38
])

max_test : Test
max_test = group([
  test assert max(3, 7) == 7
  test assert max(-3, -7) == -3
])

min_test : Test
min_test = group([
  test assert min(3, 7) == 3
  test assert min(-3, -7) == -7
])

round_test : Test
round_test = group([
  test assert round(-8.4) == -8
  test assert round(1.5) == 2
])

trunc_test : Test
trunc_test = group([
  test assert trunc(-8.6) == -8
  test assert trunc(1.9) == 1
])


//-- Conversions
to_int_test : Test
to_int_test = group([
  test assert to_int(3.7) == 3
  test assert to_int('a') == 97
  test assert to_int(['1', '3', '5']) == 135
  test assert capture(|-| to_int(['0', '.', '8'])) == CantParseInt("0.8")
  test assert to_int("83") == 83
  test assert capture(|-| to_int("2a")) == CantParseInt("2a")
])

to_float_test : Test
to_float_test = group([
  test assert to_float(3 : Int) == 3.0
  test assert to_float(['5', '8']) == 58.0
  test assert to_float(['1', '.', '3', '5']) == 1.35
  test assert to_float(['.', '1']) == .1
  test assert capture(|-| to_float(['1', '.', '3', '.'])) ==
    CantParseFloat("1.3.")
  test assert to_float("2") == 2.0
  test assert to_float("83.0") == 83.0
  test assert to_float(".37") == .37
  test assert capture(|-| to_float("4a")) == CantParseFloat("4a")
])

to_char_test : Test
to_char_test = group([
  test assert to_char(97 : Int) == 'a'
  test assert to_char(10 : Int) == '\n'
])

to_atom_test : Test
to_atom_test = group([
  test assert to_atom('a') == @a
  test assert to_atom(['h', 'i']) == @hi
  test assert to_atom("hello") == @hello
])

to_list_test : Test
to_list_test = group([
  test
    let l = to_list(#[1, 2])
    // order is undefined
    assert l == [1, 2] || l == [2, 1]
  test assert to_list(#[]) == []

  test
    let l = to_list({ @hey => true, @hi => false })
    // order is undefined
    assert l == [(@hey, true), (@hi, false)] ||
      l == [(@hi, false), (@hey, true)]
  test assert to_list({}) == []
])

to_set_test : Test
to_set_test = group([
  test assert to_set([1, 2]) == #[1, 2]
  test assert to_set([]) == #[]
  test assert to_set({ @hey => true, @hi => false }) ==
    #[(@hey, true), (@hi, false)]
  test assert to_set({}) == #[]
])

to_map_test : Test
to_map_test = group([
  test assert to_map([(1, "one"), (2, "two")]) == { 1 => "one", 2 => "two" }
  test assert to_map([]) == {}
  test assert to_map(#[(@hey, true), (@hi, false)]) ==
    { @hey => true, @hi => false }
  test assert to_map(#[]) == {}
])

struct Foo {
  foo : Int
  bar : String
}

to_str_test : Test
to_str_test = group([
  test assert to_str(1) == "1"
  test assert to_str(7.89) == "7.89"
  test assert to_str(true) == "true"
  test assert to_str(@hey) == "hey"
  test assert to_str('c') == "99"
  test assert to_str("hi") == "hi"
  test assert to_str((7.5, @hi)) == "(7.5, hi)"
  test assert to_str([true, false]) == "[true, false]"
  test
    let str = to_str(#[2, 88.03])
    // order is undefined
    assert str == "#[2, 88.03]" || str == "#[88.03, 2]"
  test
    let str = to_str({ @hey => "hi", @later => "bye" })
    // order is undefined
    assert str == "{ hey => \"hi\", later => \"bye\" }" ||
      str == "{ later => \"bye\", hey => \"hi\" }"
  test assert to_str(Some(true)) == "Some(true)"
  test assert to_str(None) == "None"
  test
    let str = to_str({ a = 8.7, foo = @hello })
    // order is undefined
    assert str == "{ a = 8.7, foo = hello }" ||
      str == "{ foo = hello, a = 8.7 }"
  test
    let str = to_str(Foo { foo = 77, bar = "Bar" })
    // order is undefined
    assert str == "Foo { foo = 77, bar = \"Bar\" }" ||
      str == "Foo { bar = \"Bar\", foo = 77 }"
])

struct Bar {
  one_field : String
  another_long_field : Int
  foo : Atom
  very_important_field : Char
  unnecessary_field : [Bool]
}

to_pretty_test : Test
to_pretty_test = group([
  test assert to_pretty(1) == "1"
  test assert to_pretty(7.89) == "7.89"
  test assert to_pretty(true) == "true"
  test assert to_pretty(@hey) == "hey"
  test assert to_pretty('c') == "99"
  test assert to_pretty("hi") == "hi"
  test assert to_pretty((7.5, @hi)) == "(7.5, hi)"
  test assert to_pretty([true, false]) == "[true, false]"
  test
    let str = to_pretty(#[2, 88.03])
    // order is undefined
    assert str == "#[2, 88.03]" || str == "#[88.03, 2]"
  test
    let str = to_pretty({ @hey => "hi", @later => "bye" })
    // order is undefined
    assert str == "{ hey => \"hi\", later => \"bye\" }" ||
      str == "{ later => \"bye\", hey => \"hi\" }"
  test assert to_pretty(Some(true)) == "Some(true)"
  test assert to_pretty(None) == "None"
  test
    let str = to_pretty({ a = 8.7, foo = @hello })
    // order is undefined
    assert str == "{ a = 8.7, foo = hello }" ||
      str == "{ foo = hello, a = 8.7 }"
  test
    let str = to_pretty(Foo { foo = 77, bar = "Bar" })
    // order is undefined
    assert str == "Foo { foo = 77, bar = \"Bar\" }" ||
      str == "Foo { bar = \"Bar\", foo = 77 }"

  test
    let tuple = (
      27,
      0.138,
      false,
      @hello,
      '\n',
      (@sub_tuple, true, 's', 523.81),
      ["first", "second", "third"]
    )
    let quoted = map(@erlang:tuple_to_list(tuple) : [A], to_str)
    assert to_pretty(tuple) == "(\n  " ++ List.join(quoted, ",\n  ") ++ "\n)"
  test
    let list = [
      "this is some sentence"
      "this is another sentence"
      "hello"
      "hey"
      "perhaps a longer sentence right here"
    ]
    let quoted = map(list, |e| "\"" ++ e ++ "\"")
    assert to_pretty(list) == "[\n  " ++ List.join(quoted, "\n  ") ++ "\n]"
  test
    let set = #[
      @some_atom
      @another_atom
      @yet_another_atom
      @a_really_long_atom_way_over_here
      @one_more_atom
    ]
    let strs = to_list(set) |> map(to_str)
    assert to_pretty(set) == "#[\n  " ++ List.join(strs, "\n  ") ++ "\n]"
  test
    let m = {
      1 => false
      932 => true
      10814 => true
      0.137941 => true
      941.308 => false
      811041.30 => true
    }
    let strs = to_list(m) |> map(|(k, v)| to_str(k) ++ " => " ++ to_str(v))
    assert to_pretty(m) == "{\n  " ++ List.join(strs, "\n  ") ++ "\n}"
  test
    let record = {
      another_long_field = 895328942
      foo = @long_atoms_are_great
      one_field = "here is one"
      unnecessary_field = [false, false, false, false]
      very_important_field = 'v'
    }
    let str = "{\n" ++
      "  another_long_field = 895328942\n" ++
      "  foo = long_atoms_are_great\n" ++
      "  one_field = \"here is one\"\n" ++
      "  unnecessary_field = [false, false, false, false]\n" ++
      // Characters are printed as codepoints.
      "  very_important_field = " ++ to_str('v') ++ "\n" ++
    "}"
    assert to_pretty(record) == str

    // Need := here so record doesn't unify with Bar directly.
    let bar = Bar { very_important_field := 'v' | record }
    assert to_pretty(bar) == "Bar " ++ str
])
