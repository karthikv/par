module BaseTest

import Test (group, capture)

struct Foo {
  foo : Int
  bar : String
}

to_str_test : Test
to_str_test = group([
  // @example
  test assert to_str(1) == "1"
  test assert to_str(7.89) == "7.89"
  // @example
  test assert to_str(true) == "true"
  // @example
  test assert to_str(@hey) == "hey"
  // @example
  test assert to_str('c') == "99"
  // @example
  test assert to_str("hi") == "hi"
  test assert to_str((7.5, @hi)) == "(7.5, hi)"
  test assert to_str((true, "hello", '\n')) == "(true, \"hello\", 10)"
  // @example
  test assert to_str([true, false]) == "[true, false]"
  test
    let str = to_str(#[2, 88.03])
    // order is undefined
    assert str == "#[2, 88.03]" || str == "#[88.03, 2]"
  test
    let str = to_str({ @hey => "hi", @later => "bye" })
    // order is undefined
    assert str == "{ hey => \"hi\", later => \"bye\" }" ||
      str == "{ later => \"bye\", hey => \"hi\" }"
  test assert to_str(Some(true)) == "Some(true)"
  test assert to_str(None) == "None"
  // @example
  test
    let str = to_str({ a = 8.7, foo = @hello })
    // order is undefined
    assert str == "{ a = 8.7, foo = hello }" ||
      str == "{ foo = hello, a = 8.7 }"
  test
    let str = to_str(Foo { foo = 77, bar = "Bar" })
    // order is undefined
    assert str == "Foo { foo = 77, bar = \"Bar\" }" ||
      str == "Foo { bar = \"Bar\", foo = 77 }"
])

struct Bar {
  one_field : String
  another_long_field : Int
  foo : Atom
  very_important_field : Char
  unnecessary_field : [Bool]
}

to_pretty_test : Test
to_pretty_test = group([
  test assert to_pretty(1) == "1"
  test assert to_pretty(7.89) == "7.89"
  test assert to_pretty(true) == "true"
  test assert to_pretty(@hey) == "hey"
  test assert to_pretty('c') == "99"
  test assert to_pretty("hi") == "hi"
  test assert to_pretty((7.5, @hi)) == "(7.5, hi)"
  test assert to_pretty([true, false]) == "[true, false]"
  test
    let str = to_pretty(#[2, 88.03])
    // order is undefined
    assert str == "#[2, 88.03]" || str == "#[88.03, 2]"
  test
    let str = to_pretty({ @hey => "hi", @later => "bye" })
    // order is undefined
    assert str == "{ hey => \"hi\", later => \"bye\" }" ||
      str == "{ later => \"bye\", hey => \"hi\" }"
  test assert to_pretty(Some(true)) == "Some(true)"
  test assert to_pretty(None) == "None"
  test
    let str = to_pretty({ a = 8.7, foo = @hello })
    // order is undefined
    assert str == "{ a = 8.7, foo = hello }" ||
      str == "{ foo = hello, a = 8.7 }"
  test
    let str = to_pretty(Foo { foo = 77, bar = "Bar" })
    // order is undefined
    assert str == "Foo { foo = 77, bar = \"Bar\" }" ||
      str == "Foo { bar = \"Bar\", foo = 77 }"

  // @example
  test
    let tuple = (
      27,
      0.138,
      false,
      @hello,
      '\n',
      (523.81, true, @sub_tuple, 's'),
      ["first", "second", "third"]
    )
    assert to_pretty(tuple) == "(\n" ++
      "  27,\n" ++
      "  0.138,\n" ++
      "  false,\n" ++
      "  hello,\n" ++
      "  10,\n" ++
      "  (523.81, true, sub_tuple, 115),\n" ++
      "  [\"first\", \"second\", \"third\"]\n" ++
    ")"
  test
    let list = [
      "this is some sentence"
      "this is another sentence"
      "hello"
      "hey"
      "perhaps a longer sentence right here"
    ]
    let quoted = map(list, |e| "\"" ++ e ++ "\"")
    assert to_pretty(list) == "[\n  " ++ List.join(quoted, "\n  ") ++ "\n]"
  test
    let set = #[
      @some_atom
      @another_atom
      @yet_another_atom
      @a_really_long_atom_way_over_here
      @one_more_atom
    ]
    let strs = to_list(set) |> map(to_str)
    assert to_pretty(set) == "#[\n  " ++ List.join(strs, "\n  ") ++ "\n]"
  test
    let m = {
      1 => false
      932 => true
      10814 => true
      0.137941 => true
      941.308 => false
      811041.30 => true
    }
    let strs = to_list(m) |> map(|(k, v)| to_str(k) ++ " => " ++ to_str(v))
    assert to_pretty(m) == "{\n  " ++ List.join(strs, "\n  ") ++ "\n}"
  test
    let record = {
      another_long_field = 895328942
      foo = @long_atoms_are_great
      one_field = "here is one"
      unnecessary_field = [false, false, false, false]
      very_important_field = 'v'
    }
    let str = "{\n" ++
      "  another_long_field = 895328942\n" ++
      "  foo = long_atoms_are_great\n" ++
      "  one_field = \"here is one\"\n" ++
      "  unnecessary_field = [false, false, false, false]\n" ++
      // Characters are printed as codepoints.
      "  very_important_field = " ++ to_str('v') ++ "\n" ++
    "}"
    assert to_pretty(record) == str

    // Need := here so record doesn't unify with Bar directly.
    let bar = Bar { very_important_field := 'v' | record }
    assert to_pretty(bar) == "Bar " ++ str
])

length_test : Test
length_test = group([
  // @example
  test assert length("abc") == 3
  // @example
  test assert length("") == 0

  // @example
  test assert length(['a', 'b']) == 2
  // @example
  test assert length([]) == 0

  // @example
  test assert length(#[3.7]) == 1
  // @example
  test assert length(#[]) == 0

  // @example
  test assert length({ true => @hi, false => @hey }) == 2
  // @example
  test assert length({}) == 0
])

empty_test : Test
empty_test = group([
  // @example
  test assert !empty?("abc")
  // @example
  test assert empty?("")

  // @example
  test assert !empty?(['a', 'b'])
  // @example
  test assert empty?([])

  // @example
  test assert !empty?(#[3.7])
  // @example
  test assert empty?(#[])

  // @example
  test assert !empty?({ true => @hi, false => @hey })
  // @example
  test assert empty?({})
])

map_test : Test
map_test = group([
  // @example
  test assert map(Some(3), |a| a + 1) == Some(4)
  // @example
  test assert map(None, |a| a + 1) == None

  // @example
  test assert map([@hi, @hey], |a| a == @hey) == [false, true]
  // @example
  test assert map([], |a| a == @hey) == []

  // @example
  test assert map(#[{ ch = 'a' }, { ch = 'b' }], .ch) == #['a', 'b']
  // @example
  test assert map(#[], .ch) == #[]

  // @example
  test assert map({ true => @hi }, |(k, v)| (v, k)) == { @hi => true }
  // @example
  test assert map({}, |(k, v)| (v, k)) == {}
])

fold_test : Test
fold_test = group([
  // @example
  test assert fold([1, 2, 3], 10, |accum, a| accum + a) == 16
  // @example
  test assert fold([], 10, |accum, a| accum + a) == 10

  // @example
  test assert fold(#[1, 2, 3], 10, |accum, a| accum + a) == 16
  // @example
  test assert fold(#[], 10, |accum, a| accum + a) == 10

  // @example
  test
    let m = { 1 => 2, 3 => 4, 5 => 6 }
    assert fold(m, 10, |accum, (k, v)| accum + k + v) == 31
  // @example
  test assert fold({}, 10, |accum, (k, v)| accum + k + v) == 10
])

filter_test : Test
filter_test = group([
  // @example
  test assert filter(["cat", "dog", "mouse"], |a| a < "lion") == ["cat", "dog"]
  // @example
  test assert filter([], |a| a < "lion") == []

  // @example
  test assert filter(#["cat", "dog", "mouse"], |a| a < "lion") ==
    #["cat", "dog"]
  // @example
  test assert filter(#[], |a| a < "lion") == #[]

  // @example
  test
    let m = { "cat" => @cat, "dog" => @dog, "mouse" => @mouse }
    assert filter(m, |(k, v)| k < "lion" && v == @dog) == { "dog" => @dog }
  // @example
  test assert filter({}, |(k, v)| k < "lion" && v == @dog) == {}
])

find_test : Test
find_test = group([
  // @example
  test assert find(['c', 'z', 'g'], |a| a > 'e') == Some('z')
  // @example
  test assert find(['c', 'a'], |a| a > 'e') == None

  // @example
  test
    let found = find(#['c', 'z', 'g'], |a| a > 'e')
    // order is undefined
    assert found == Some('z') || found == Some('g')
  // @example
  test assert find(#['c', 'a'], |a| a > 'e') == None

  // @example
  test
    let found = find({
      'c' => true
      'z' => false
      'g' => false
    }, |(k, v)| k > 'e' && !v)
    // order is undefined
    assert found == Some(('z', false)) || found == Some(('g', false))
  // @example
  test assert find(#['c', 'a'], |a| a > 'e') == None
])

filter_map_test : Test
filter_map_test = group([
  // @example
  test assert filter_map([true, false], |a| if a then Some([a]) else None) ==
    [[true]]
  // @example
  test assert filter_map([], |a| if a then Some([a]) else None) == []

  // @example
  test assert filter_map(#[true, false], |a| if a then Some([a]) else None) ==
    #[[true]]
  // @example
  test assert filter_map(#[], |a| if a then Some([a]) else None) == #[]

  // @example
  test
    let m = { true => [true], false => [false] }
    assert filter_map(m, |(k, v)| if k then Some((v, k)) else None) ==
      { [true] => true }
  // @example
  test assert filter_map({}, |(k, v)| if k then Some((v, k)) else None) == {}
])

fold_map_test : Test
fold_map_test = group([
  // @example
  test assert fold_map(["hi", "bye"], "-", |accum, a|
    (accum ++ a, a ++ "!")
  ) == ("-hibye", ["hi!", "bye!"])
  // @example
  test assert fold_map([], "-", |accum, a|
    (accum ++ a, a ++ "!")
  ) == ("-", [])

  // @example
  test
    let (final, mapped) = fold_map(#["hi", "bye"], "-", |accum, a|
      (accum ++ a, a ++ "!")
    )
    assert mapped == #["hi!", "bye!"]
    // order is undefined
    assert final == "-hibye" || final == "-byehi"
  // @example
  test assert fold_map(#[], "-", |accum, a|
    (accum ++ a, a ++ "!")
  ) == ("-", #[])

  // @example
  test
    let m = { "hi" => "now", "bye" => "later" }
    let (final, mapped) = fold_map(m, "-", |accum, (k, v)|
      (accum ++ k ++ v, (k ++ "!", v ++ "!"))
    )
    assert mapped == { "hi!" => "now!", "bye!" => "later!" }
    // order is undefined
    assert final == "-hinowbyelater" || final == "-byelaterhinow"
  // @example
  test assert fold_map({}, "-", |accum, (k, v)|
    (accum ++ k ++ v, (k ++ "!", v ++ "!"))
  ) == ("-", {})
])

put_test : Test
put_test = group([
  // @example
  test assert put(["second"], "first") == ["first", "second"]
  // @example
  test assert put([], "first") == ["first"]

  // @example
  test assert put(#["second"], "first") == #["first", "second"]
  // @example
  test assert put(#[], "first") == #["first"]

  // @example
  test assert put({ "second" => 2 }, ("first", 1)) ==
    { "first" => 1, "second" => 2 }
  // @example
  test assert put({}, ("first", 1)) == { "first" => 1 }
])

delete_test : Test
delete_test = group([
  // @example
  test assert delete([38.52, 1.7, 4, 1.7], 1.7) == [38.52, 4]
  // @example
  test assert delete([38.52, 1.7, 4, 1.7], 37.0) == [38.52, 1.7, 4, 1.7]
  test assert delete([], 37.0) == []

  // @example
  test assert delete(#[38.52, 1.7, 4, 1.7], 1.7) == #[38.52, 4]
  test assert delete(#[38.52, 1.7, 4, 1.7], 37.0) == #[38.52, 1.7, 4]
  // @example
  test assert delete(#[], 37.0) == #[]

  // @example
  test assert delete({ 38.52 => 1.7, 4 => 2.9 }, (38.52, 1.7)) == { 4 => 2.9 }
  // @example
  test assert delete({ 38.52 => 1.7, 4 => 2.9 }, (4, 3)) ==
    { 38.52 => 1.7, 4 => 2.9 }
  test assert delete({}, (38.52, 1.7)) == {}
])

contains_test : Test
contains_test = group([
  // @example
  test assert contains?([38.52, 1.7, 4, 1.7], 1.7)
  // @example
  test assert !contains?([38.52, 1.7, 4, 1.7], 37.0)
  test assert !contains?([], 37.0)

  // @example
  test assert contains?(#[38.52, 1.7, 4, 1.7], 1.7)
  // @example
  test assert !contains?(#[38.52, 1.7, 4, 1.7], 37.0)
  test assert !contains?(#[], 37.0)

  // @example
  test assert contains?({ 38.52 => 1.7, 4 => 2.9 }, (38.52, 1.7))
  test assert !contains?({ 38.52 => 1.7, 4 => 2.9 }, (4, 3))
  // @example
  test assert !contains?({}, (38.52, 1.7))
])

all_test : Test
all_test = group([
  // @example
  test assert all?(['a', 'e', 'a'], |x| x == 'a' || x == 'e')
  // @example
  test assert !all?(['a', 'e', 'a'], |x| x == 'a' || x == 'i')
  // @example
  test assert all?([], |x| x)

  // @example
  test assert all?(#['a', 'e', 'a'], |x| x == 'a' || x == 'e')
  // @example
  test assert !all?(#['a', 'e', 'a'], |x| x == 'a' || x == 'i')
  test assert all?(#[], |x| x)

  // @example
  test assert all?({ 'a' => 1, 'e' => 2 }, |(k, v)|
    (k == 'a' || k == 'e') && v > 0
  )
  // @example
  test assert !all?({ 'a' => 1, 'e' => 2 }, |(k, v)|
    (k == 'a' || k == 'e') && v > 1
  )
  test assert !all?({ 'a' => 1, 'e' => 2 }, |(k, v)|
    (k == 'a' || k == 'i') && v > 0
  )
  test assert all?({}, |(k, v)| (k == 'a' || k == 'i') && v > 0)
])

any_test : Test
any_test = group([
  // @example
  test assert any?(['a', 'e', 'a'], |x| x == 'e' || x == 'i')
  // @example
  test assert !any?(['a', 'e', 'a'], |x| x == 'o' || x == 'i')
  // @example
  test assert !any?([], |x| x == 'e' || x == 'i')

  // @example
  test assert any?(#['a', 'e', 'a'], |x| x == 'e' || x == 'i')
  // @example
  test assert !any?(#['a', 'e', 'a'], |x| x == 'o' || x == 'i')
  test assert !any?(#[], |x| x == 'e' || x == 'i')

  // @example
  test assert any?({ 'a' => 1, 'e' => 2 }, |(k, v)| k == 'a' || v > 2)
  test assert any?({ 'a' => 1, 'e' => 2 }, |(k, v)| k == 'i' || v > 1)
  // @example
  test assert !any?({ 'a' => 1, 'e' => 2 }, |(k, v)| k == 'i' || v > 2)
  test assert !any?({}, |(k, v)| k == 'i' || v > 2)
])

head_test : Test
head_test = group([
  // @example
  test assert head([1]) == 1
  // @example
  test assert head(["hi", "hey", "hello"]) == "hi"
  test assert capture(|-| head([])) == EmptyList
])

tail_test : Test
tail_test = group([
  // @example
  test assert tail([1]) == []
  // @example
  test assert tail(["hi", "hey", "hello"]) == ["hey", "hello"]
  test assert capture(|-| tail([])) == EmptyList
])

lookup_test : Test
lookup_test = group([
  // @example
  test assert lookup({ "bar" => 3.7, "baz" => 1 }, "foo") == None
  // @example
  test assert lookup({ 'h' => false }, 'h') == Some(false)
  // @example
  test assert lookup({}, true) == None
])

get_test : Test
get_test = group([
  // @example
  test assert get({ "bar" => 3.7, "baz" => 1 }, "baz") == 1
  // @example
  test assert get({ 'h' => false }, 'h') == false
  test assert capture(|-| get({ 'h' => false }, 'g')) == BadKey
  test assert capture(|-| get({}, true)) == BadKey
])

key_test : Test
key_test = group([
  // @example
  test assert key?({ "bar" => 3.7, "baz" => 1 }, "baz")
  // @example
  test assert !key?({ 'h' => false }, 'g')
  // @example
  test assert !key?({}, true)
])

remove_test : Test
remove_test = group([
  // @example
  test assert remove({ "bar" => 3.7, "baz" => 1 }, "baz") == { "bar" => 3.7 }
  // @example
  test assert remove({ 'h' => false }, 'h') == {}
  // @example
  test assert remove({ 'h' => false }, 'g') == { 'h' => false }
  // @example
  test assert remove({}, true) == {}
])

some_or_test : Test
some_or_test = group([
  // @example
  test assert some_or(Some(0.48), 21.3) == 0.48
  // @example
  test assert some_or(None, 'h') == 'h'
])

first_test : Test
first_test = group([
  // @example
  test assert first((1, 2)) == 1
  // @example
  test assert first(('a', true)) == 'a'
])

second_test : Test
second_test = group([
  // @example
  test assert second((1, 2)) == 2
  // @example
  test assert second(('a', true)) == true
])

abs_test : Test
abs_test = group([
  // @example
  test assert abs(1) == 1
  test assert abs(35.8) == 35.8
  // @example
  test assert abs(-1) == 1
  // @example
  test assert abs(-35.8) == 35.8
])

ceil_test : Test
ceil_test = group([
  // @example
  test assert ceil(38.1) == 39
  test assert ceil(38.9) == 39
  // @example
  test assert ceil(38) == 38
  // @example
  test assert ceil(-38.1) == -38
  // @example
  test assert ceil(-38.9) == -38
  test assert ceil(-38) == -38
])

floor_test : Test
floor_test = group([
  test assert floor(38.1) == 38
  // @example
  test assert floor(38.9) == 38
  // @example
  test assert floor(38) == 38
  // @example
  test assert floor(-38.1) == -39
  // @example
  test assert floor(-38.9) == -39
  test assert floor(-38) == -38
])

max_test : Test
max_test = group([
  // @example
  test assert max(3, 7) == 7
  // @example
  test assert max(-3, -7) == -3
])

min_test : Test
min_test = group([
  // @example
  test assert min(3, 7) == 3
  // @example
  test assert min(-3, -7) == -7
])

round_test : Test
round_test = group([
  // @example
  test assert round(-8.4) == -8
  // @example
  test assert round(1.5) == 2
])

trunc_test : Test
trunc_test = group([
  // @example
  test assert trunc(-8.6) == -8
  // @example
  test assert trunc(1.9) == 1
])

to_int_test : Test
to_int_test = group([
  // @example
  test assert to_int(3.7) == 3
  // @example
  test assert to_int('a') == 97
  // @example
  test assert to_int(['1', '3', '5']) == 135
  test assert capture(|-| to_int(['0', '.', '8'])) == CantParseInt("0.8")
  // @example
  test assert to_int("83") == 83
  test assert capture(|-| to_int("2a")) == CantParseInt("2a")
])

to_float_test : Test
to_float_test = group([
  // @example
  test assert to_float(3 : Int) == 3.0
  test assert to_float(['5', '8']) == 58.0
  // @example
  test assert to_float(['1', '.', '3', '5']) == 1.35
  test assert to_float(['.', '1']) == .1
  test assert capture(|-| to_float(['1', '.', '3', '.'])) ==
    CantParseFloat("1.3.")
  // @example
  test assert to_float("2") == 2.0
  // @example
  test assert to_float("83.0") == 83.0
  // @example
  test assert to_float(".37") == .37
  test assert capture(|-| to_float("4a")) == CantParseFloat("4a")
])

to_char_test : Test
to_char_test = group([
  // @example
  test assert to_char(97 : Int) == 'a'
  // @example
  test assert to_char(10 : Int) == '\n'
])

to_atom_test : Test
to_atom_test = group([
  // @example
  test assert to_atom('a') == @a
  // @example
  test assert to_atom(['h', 'i']) == @hi
  // @example
  test assert to_atom("hello") == @hello
])

to_list_test : Test
to_list_test = group([
  // @example
  test
    let l = to_list(#[1, 2])
    // order is undefined
    assert l == [1, 2] || l == [2, 1]
  test assert to_list(#[]) == []

  // @example
  test
    let l = to_list({ "hey" => true, "hi" => false })
    // order is undefined
    assert l == [("hey", true), ("hi", false)] ||
      l == [("hi", false), ("hey", true)]
  test assert to_list({}) == []
])

to_set_test : Test
to_set_test = group([
  // @example
  test assert to_set([1, 2]) == #[1, 2]
  test assert to_set([]) == #[]
  // @example
  test assert to_set({ "hey" => true, "hi" => false }) ==
    #[("hey", true), ("hi", false)]
  // @example
  test assert to_set({}) == #[]
])

to_map_test : Test
to_map_test = group([
  // @example
  test assert to_map([(1, "one"), (2, "two")]) == { 1 => "one", 2 => "two" }
  // @example
  test assert to_map([]) == {}
  // @example
  test assert to_map(#[("hey", true), ("hi", false)]) ==
    { "hey" => true, "hi" => false }
  test assert to_map(#[]) == {}
])
